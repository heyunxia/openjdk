/*
 * Copyright (c) 2009, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

/**************************************************************************
 * modules.group defines the top-level modules that merge the 
 * fine-grained modules defined in modules.config.  There are 
 * different kinds of top-level modules:
 * 1. implementation modules that only permit jdk modules to use (sun.*)
 * 2. modules exporting APIs (jdk.* defined here or generated by
 *    the class analyzer to export sun.* module).
 * 3. tool modules (defined in modules.config) 
 * 4. aggregator modules that do not contain any class
 *
 **************************************************************************

/*
 * Example:
 *    module jdbc {
 *        include jdbc-base, jdbc-enterprise, jdbc-odbc;
 *    }
 */

// Workaround: jigsaw depends on the existence of
// both jdk.boot and jdk.base modules.
//
// Move classes and resources from the base module
// to the boot module.  The module-info.java for
// the boot module is already output in the
// platform module list.

module jdk.boot {
    include base;
    include unpack200-tool;
    include jdk.jmod;
    class org.openjdk.jigsaw.Hi;    // testing
}

// base module
module jdk.base {
    // Workaround: include the policy files for now.
    // They have to be bundled in signed jars.
    include US_export_policy;
    include local_policy;

    // include JSR-292 in the base module for now
    include invokedynamic;

    requires public local jdk.boot;

    // explicit optional dependences
    requires optional local sun.resources;
    requires optional local sun.localedata;
    requires optional local sun.charsets;
    class org.openjdk.jigsaw.Hi;    // testing
}

/*
 * Names of jdk platform modules must start with "jdk." or "sun."
 * ("sun." prefix is added as a temporary solution for now until
 * we decide if we want to name the private platform modules with
 * "jdk." prefix as well).
 *
 * For each public platform module, there is a corresponding
 * internal module with "sun." prefix.  The internal module
 * only permits the platform modules to require.  This is needed
 * because if any platform module is a local dependence of 
 * another module, it would only permit its requesting modules
 * to require. In other words, that platform module would
 * not permit applications to use.
 *
 * Rename all private internal modules with "sun." prefix
 */

module sun.desktop {
    requires local jdk.boot;   // ensure loaded by bootstrap class loader
    include beans;
    include client;
    requires sun.xmltransform;

    // jndi and corba have a dependency on Applet but 
    // applet can't be separated from client due to circular dependency
    include applet;
}

module sun.xml {
    requires local jdk.boot;   // ensure loaded by bootstrap class loader
    include jaxp-api;
}

module sun.management {
    requires local jdk.boot;   // ensure loaded by bootstrap class loader
    include management;
}

module jdk.jmx.snmp {
    requires local jdk.boot;   // ensure loaded by bootstrap class loader
    include management-snmp;
}

module jdk.jmx.iiop {
    requires local jdk.boot;   // ensure loaded by bootstrap class loader
    include management-iiop;
}

module sun.cosnaming {
    requires local jdk.boot;   // ensure loaded by bootstrap class loader
    include jndi-cosnaming;
}

module sun.corba {
    requires local jdk.boot;   // ensure loaded by bootstrap class loader
    include corba;
}

module sun.jdbc {
    requires local jdk.boot;   // ensure loaded by bootstrap class loader
    include jdbc;
}

module sun.jta {
    requires local jdk.boot;   // ensure loaded by bootstrap class loader
    include jta ;
}

module sun.legacy {
    requires local jdk.boot;   // ensure loaded by bootstrap class loader
    include private-legacy;
    include net-compat;
    include deprecated;
    include jdbc-odbc;
}

module sun.kerberos {
    requires local jdk.boot;   // ensure loaded by bootstrap class loader
    include security-kerberos;
}

module sun.sunpkcs11 {
    include security-sunpkcs11;
}

module sun.jce.provider {
    include security-sunjce;
}

module sun.sunec {
    // split sun.security.ec package with sun.security
    requires local jdk.boot;
    include security-sunec;
}

module sun.sunmscapi {
    include security-sunmscapi;
}

module sun.xmldsig {
    include security-xmldsig;
}

// ## TODO: make sun.security.smartcardio.** module-private
module jdk.smartcardio {
    include security-smartcardio;
}

module sun.xalan {
    requires local jdk.boot;   // ensure loaded by bootstrap class loader
    include jaxp-xalan;
}

module sun.xerces {
    requires local jdk.boot;   // ensure loaded by bootstrap class loader
    include jaxp-xerces-impl;
    include jaxp-xerces-resolver;
}

module sun.xmlparser {
    requires public local sun.xml;
    requires public local sun.xerces;
}

module jdk.xmlparser {
    requires public sun.xmlparser;
}

module sun.xmltransform {
    requires public local sun.xml;
    requires public local sun.xalan;
}

module jdk.xmltransform {
    requires public sun.xmltransform;
}

module sun.jndi.providers {
    requires local jdk.boot;   // ensure loaded by bootstrap class loader
    include jndi-ldap;
    include jndi-dns;
    include jndi-rmiregistry;
    include sun.auth.ldap;
    include sun.auth.jndi;
}

module sun.jx.annotations {
    requires local jdk.boot;   // ensure loaded by bootstrap class loader
    include common-annotations;
}

module sun.rmi {
    requires local jdk.boot;   // ensure loaded by bootstrap class loader
    include rmi;
    include rmi-activation;
}

module sun.sasl {
    requires local jdk.boot;   // ensure loaded by bootstrap class loader
    include security-sasl;
}

module sun.jsse {
    requires local jdk.boot;   // ensure loaded by bootstrap class loader
    include security-jsse;
}

module sun.jaas {
    requires local jdk.boot;   // ensure loaded by bootstrap class loader
    include security-auth;
}

module jdk.jaas {
    requires public sun.jaas;
    requires public sun.callback.dialog;
    requires public sun.callback.text;
}

// ## split sun.security.pkcs and sun.security.util package between jdk.boot
// ## they are used by keytool only. See 6953295
module sun.security.misc {
    requires local jdk.boot;   // ensure loaded by bootstrap class loader
    include security-misc;
}

module sun.security.compat {
    include security-compat;
}

module sun.deploy {
    include deploy;
}

// ## can this be loaded by a different class loader?
module sun.httpserver {
    requires local jdk.boot;
    include httpserver;
}

module sun.hprof {
    requires local jdk.boot;   // loaded by bootstrap class loader
    include hprof;
}

module sun.instrument {
    requires local jdk.boot;   // loaded by bootstrap class loader
    include instrument;
}

module sun.jaxws {
    requires local jdk.boot;   // loaded by bootstrap class loader
    include jaxws;
}

module sun.jndi {
    requires local jdk.boot;   // loaded by bootstrap class loader
    include jndi;
}

module sun.scripting {
    requires local jdk.boot;   // loaded by bootstrap class loader
    include scripting;
    include scripting-rhino;
}

// ## localedata is loaded by the extension class loader
// ## for now, in the same connected graph loaded by the bootstrap class loader
module sun.localedata {
    requires local jdk.boot;
    include localedata;
}

module sun.logging {
    requires local jdk.boot;   // loaded by bootstrap class loader
    include logging;
    include tracing;
}

module sun.prefs {
    requires local jdk.boot;   // loaded by bootstrap class loader
    include prefs;
}

module sun.charsets {
    requires local jdk.boot;   // loaded by bootstrap class loader
    include charsets;
}

module sun.resources {
    requires local jdk.boot;   // loaded by bootstrap class loader
    include resources;
}

module sun.sctp {
    requires local jdk.boot;   // loaded by bootstrap class loader
    include sctp;
}


/**************************************************************************/
/* Modules with "jdk.*" prefix  (no corresponding sun.* module)           */
/* rename module <m> to jdk.<m> so that native libraries and resources    */
/* files in the submodule <m> will be included for modularization properly*/
/**************************************************************************/

module jdk.compiler {
    include compiler;
}

module jdk.attach {
    include attach;
}

module jdk.jdwp {
    include jdwp;
}

module jdk.jvmstat {
    include jvmstat;
}

module jdk.servicetag {
    include servicetag;
}

module jdk.sajdi {
    include sajdi;
}

/**************************************************************************/
/*  Aggregator modules                                                    */
/**************************************************************************/

module jdk.serviceability {
    requires jdk.instrument;
    requires jdk.attach;
    requires jdk.jvmstat;
    requires jdk.jdwp;
    requires jdk.jdi;
    requires sun.hprof;
}

module jdk.langtools {
    requires public jdk.apt;
    requires public jdk.javac;
    requires public jdk.javap;
    requires public jdk.javah;
    requires public jdk.javadoc;
    requires public jdk.compiler;
}

module jdk.gui.tools {
    requires jdk.appletviewer;
    requires jdk.jconsole;
    requires jdk.jdb.gui;
    requires jdk.policytool;
    requires jdk.sajdi;
    requires jdk.serialver;
    requires jdk.schemagen;
    requires jdk.wsgen;
    requires jdk.wsimport;
    requires jdk.xjc;
}

module jdk.cli.tools {
    requires jdk.apt;
    requires jdk.extcheck;
    requires jdk.idlj;
    requires jdk.jar;
    requires jdk.jarsigner;
    requires jdk.javac;
    requires jdk.javadoc;
    requires jdk.javah;
    requires jdk.javap;
    requires jdk.jdb;
    requires jdk.jhat;
    requires jdk.jinfo;
    requires jdk.jmap;
    requires jdk.jpkg;
    requires jdk.jps;
    requires jdk.jrepo;
    requires jdk.jrunscript;
    requires jdk.jsadebugd;
    requires jdk.jstack;
    requires jdk.jstat;
    requires jdk.jstatd;
    requires jdk.keytool;
    requires jdk.kinit;
    requires jdk.klist;
    requires jdk.ktab;
    requires jdk.native2ascii;
    requires jdk.orbd;
    requires jdk.pack200;
    requires jdk.rmic;
    requires jdk.rmid;
    requires jdk.rmiregistry;
    requires jdk.servertool;
    requires jdk.tnameserv;
}

// developer tools to be included in the jdk-base-image
module jdk.tools.base {
    requires jdk.javac;
    requires jdk.javah;
    requires jdk.jpkg;
    requires jdk.jrepo;
}

// JRE tools to be included in the jdk-module-image and jre-module-image
module jdk.tools.jre {
    requires jdk.jar;
    requires jdk.pack200;
    requires jdk.orbd;
    requires jdk.policytool;
    requires jdk.rmiregistry;
    requires jdk.tnameserv;
    requires jdk.keytool;
    requires jdk.rmid;
    requires jdk.servertool;
    // windows only
    requires jdk.kinit;
    requires jdk.klist;
    requires jdk.ktab;
}

// developer tools to be included in the jdk-module-image
module jdk.tools {
    requires jdk.jpkg;
    requires jdk.jrepo;
    // langtools
    requires jdk.javac;
    requires jdk.javap;
    requires jdk.javah;
    requires jdk.javadoc;
    // jre tools
    requires jdk.jar;
    requires jdk.pack200;
    requires jdk.orbd;
    requires jdk.policytool;
    requires jdk.rmiregistry;
    requires jdk.tnameserv;
    requires jdk.keytool;
    requires jdk.rmid;
    requires jdk.servertool;
    // windows only
    requires jdk.kinit;
    requires jdk.klist;
    requires jdk.ktab;
    // other jdk tools
    requires jdk.appletviewer;
    requires jdk.apt;
    requires jdk.extcheck;
    requires jdk.idlj;
    requires jdk.jarsigner;
    requires jdk.jconsole;
    requires jdk.jdb;
    requires jdk.jhat;
    requires jdk.jinfo;
    requires jdk.jmap;
    requires jdk.jps;
    requires jdk.jrunscript;
    requires jdk.jsadebugd;
    requires jdk.jstack;
    requires jdk.jstat;
    requires jdk.jstatd;
    requires jdk.native2ascii;
    requires jdk.rmic;
    requires jdk.schemagen;
    requires jdk.serialver;
    requires jdk.xjc;
    requires jdk.wsgen;
    requires jdk.wsimport;
}
