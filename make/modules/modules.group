/*
 * Copyright (c) 2009, 2012, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

/**************************************************************************
 * modules.group defines the top-level modules that merge the 
 * fine-grained modules defined in modules.config.  There are 
 * different kinds of top-level modules:
 * 1. implementation modules that only permit jdk modules to use (sun.*)
 * 2. modules exporting APIs (jdk.* defined here or generated by
 *    the class analyzer to export sun.* module).
 * 3. tool modules (defined in modules.config) 
 * 4. aggregator modules that do not contain any class
 *
 **************************************************************************

/*
 * Example:
 *    module jdbc {
 *        include jdbc-base, jdbc-enterprise, jdbc-odbc;
 *    }
 */

module jdk.base {
    provides java.base;

    include base;
    include unpack200-tool;
    include tools.jmod;

    // Workaround: include the policy files for now.
    // They have to be bundled in signed jars.
    include US_export_policy;
    include local_policy;

    // This is to support Properties.loadFromXML and storeToXML methods.
    // ## sun.util.xml.XMLUtils is our implementation class that should
    // ## not really be in jdk.jaxp module since it is a standalone 
    // ## technology that can be overridden.
    // ## currently exported in the jdk.jaxp.internal view
    requires optional jdk.jaxp.internal;
 
    // This optional dependency is needed for SecurityManager.checkTopLevelWindows
    // and a few other methods that check for java.awt.AWTPermission which is
    // in the desktop module
    requires optional jdk.desktop;

    // ## To be converted as services
    requires optional sun.resources;
    requires optional sun.localedata;

    provides service java.security.Provider with sun.security.provider.Sun;
    provides service java.security.Provider with sun.security.rsa.SunRsaSign;

    // ## workaround for reflection
    //
    // ## reflection generated code is a subclass of sun.reflect.MethodAccessorImpl
    // ## ConstructorAccessorImpl, or SerializationConstructorAccessorImpl
    // ## The generated code is defined by a new loader that delegates to
    // ## the defining loader of the declaring class
    exports sun.reflect;

    view jdk.base.oracle {
        exports com.oracle.nio;
        exports com.oracle.net;
        exports com.oracle.util;
    }

    view jdk.base.unsafe {
        // ## intended to export only sun.misc.Unsafe
        // ## what about the public sun.misc types?
        exports sun.misc;
    }

    view jdk.jmod {
        class org.openjdk.jigsaw.cli.Librarian;
    }

    class org.openjdk.jigsaw.Hi;    // testing
}

module jdk.instrument {
    provides java.instrument;
    include instrument;
}

/*
 * Names of jdk platform modules must start with "jdk." or "sun."
 * ("sun." prefix is added as a temporary solution for now until
 * we decide if we want to name the private platform modules with
 * "jdk." prefix as well).
 *
 * For each public platform module, there is a corresponding
 * internal module with "sun." prefix.  The internal module
 * only permits the platform modules to require.  This is needed
 * because if any platform module is a local dependence of 
 * another module, it would only permit its requesting modules
 * to require. In other words, that platform module would
 * not permit applications to use.
 *
 * Rename all private internal modules with "sun." prefix
 */

module jdk.desktop {
    provides java.desktop;
    requires local jdk.base;

    include beans;
    include client;

    // jndi and corba have a dependency on Applet but 
    // applet can't be separated from client due to circular dependency
    include applet;

    // com.sun.security.auth callback dialog
    include sun.callback.dialog;

    // Swing Look & Feels (no need to export com.sun.java.swing.plaf.nimbus)
    exports com.sun.java.swing.plaf.gtk;
    exports com.sun.java.swing.plaf.motif;
    exports com.sun.java.swing.plaf.windows;
}

// ## java.util.prefs should be moved to the base module
// ## once we eliminate the Preferences implementation for Unix
// ## to XML (currently stored as a XML file).
module jdk.prefs {
    provides java.prefs;
    requires local jdk.base;
    include prefs;
}

module jdk.management {
    provides java.management;
    include management;

    requires optional jdk.management.iiop;

    // ## temporary: need discussion with JFR team
    // ## this adds a dependency on jaxp
    include jfr;

    view oracle.jfr {
        exports com.oracle.jrockit.jfr;
        exports com.oracle.jrockit.jfr.client;
        exports com.oracle.jrockit.jfr.management;
    }
}

// JMX RMI-IIOP connector
module jdk.management.iiop {
    include management-iiop;
    exports com.sun.jmx.remote.protocol.iiop;
    permits jdk.management;
}

module jdk.snmp {
    include management-snmp;
}

module jdk.corba {
    provides java.corba;

    include corba;

    // include corba-specific tools 
    include tools.orbd;
    include tools.servertool;
    include tools.tnameserv;

    view jdk.orbd {
        class com.sun.corba.se.impl.activation.ORBD;
    }
    
    view jdk.servertool {
        class com.sun.corba.se.impl.activation.ServerTool;
    }
    
    view jdk.tnameserv {
        class com.sun.corba.se.impl.naming.cosnaming.TransientNameServer;
    }

    // development tools
    include tools.idlj;

    view jdk.idlj {
        class com.sun.tools.corba.se.idl.toJavaPortable.Compile;
    }
}

module jdk.jdbc {
    provides java.jdbc;
    include jdbc;
}

module jdk.jdbc.rowset {
    provides java.jdbc.rowset;
    include jdbc-rowset;
    exports com.sun.sql.rowset;
}

module jdk.compat {
    requires local jdk.base;   // ensure loaded by bootstrap class loader
    include private-legacy;
    include net-compat;
    include deprecated;
    include jdbc-odbc;

    // ## avoid com.sun.security.auth be splitted among many modules
    // ## most of the com.sun.security.auth should be deprecated.
    // ## need to sort out which one is still needed
    //
    // include sun.callback.dialog;
    // include sun.auth.ldap;
    // include sun.auth.kerberos;
    // include sun.auth.jndi;
    // include security-auth;

}

// Deprecated APIs used by snmp
module jdk.security.acl {
    provides java.security.acl;
    include security-acl;
}

module jdk.kerberos {
    provides java.auth.kerberos;
    requires local jdk.base;   // loaded by bootstrap class loader
    include security-kerberos;
    include sun.auth.kerberos;

    // kerberos-related tools (windows only)
    include tools.kinit;
    include tools.klist;
    include tools.ktab;

    provides service java.security.Provider with sun.security.jgss.SunProvider;

    view jdk.kinit {
        class sun.security.krb5.internal.tools.Kinit;
    }

    view jdk.klist {
        class sun.security.krb5.internal.tools.Klist;
    }

    view jdk.ktab {
        class sun.security.krb5.internal.tools.Ktab;
    }
}

module jdk.sunec {
    // split sun.security.ec package with sun.security
    requires local jdk.base;
    provides service java.security.Provider with sun.security.ec.SunEC;
    include security-sunec;
}

module jdk.sunpkcs11 {
    provides service java.security.Provider with sun.security.pkcs11.SunPKCS11;
    include security-sunpkcs11;
}

module jdk.ucrypto {
    provides service java.security.Provider with com.oracle.security.ucrypto.UcryptoProvider;
    include security-ucrypto;
}

module jdk.crypto {
    provides service java.security.Provider with com.sun.crypto.provider.SunJCE;
    include security-sunjce;
}

module jdk.sunmscapi {
    provides service java.security.Provider with sun.security.mscapi.SunMSCAPI;
    include security-sunmscapi;
}

module jdk.xmldsig {
    provides javax.xmldsig;
    provides service java.security.Provider with org.jcp.xml.dsig.internal.dom.XMLDSigRI;
    include security-xmldsig;
}

module jdk.smartcardio {
    provides javax.smartcardio;
    provides service java.security.Provider with sun.security.smartcardio.SunPCSC;
    include security-smartcardio;
}

module sun.xml {
    include jaxp-api;
}

module sun.xalan {
    include jaxp-xalan;
}

module sun.xerces {
    include jaxp-xerces-impl;
    include jaxp-xerces-resolver;
}

module jdk.jaxp {
    provides javax.xml;

    include sun.xml;
    include sun.xalan;
    include sun.xerces;
}

module jdk.jndi {
    provides javax.naming;

    requires local jdk.base;   // loaded by bootstrap class loader
    include jndi;

    // ## jndi providers
    include jndi-ldap;
    include jndi-dns;
    include jndi-rmiregistry;
    include sun.auth.ldap;
    include sun.auth.jndi;
}

module jdk.cosnaming {
    // include COS naming service provider for JNDI 
    // that pulls in jndi module
    include jndi-cosnaming;
}

module jdk.rmi {
    provides java.rmi;

    include rmi;
    include rmi-activation;

    // rmi runtime tools
    include tools.rmiregistry;
    include tools.rmid;

    view jdk.rmiregistry {
        class sun.rmi.registry.RegistryImpl;
    }

    view jdk.rmid {
        class sun.rmi.server.Activation;
    }

}

module jdk.auth {
    provides java.auth;
    provides service java.security.Provider with com.sun.security.sasl.Provider;
    requires local jdk.base;   // ensure loaded by bootstrap class loader
    include security-auth;
    include sun.callback.text;

    // combine SASL with JAAS
    include security-sasl;
    include security-sasl-ntlm;
}

module jdk.tls {
    provides java.tls;
    provides service java.security.Provider with com.sun.net.ssl.internal.ssl.Provider;
    include security-jsse;
}

module jdk.deploy {
    include deploy;
}

module jdk.jaxws {
    provides javax.jaxws;
    include jaxws;
}

// standalone technology (JSR-250) 
module jdk.jx.annotations {
    provides javax.annotation;
    include common-annotations;
}

// standalone technology (JSR-223)
module jdk.scripting {
    provides javax.script;
    include scripting;
    include scripting-rhino;
}

// ## corba and jdbc depends on javax.transaction.
// ## jigsaw resolver fails if any of its transitive dependencies
// ## doesn't require jdk.boot
module jdk.jta {
    provides javax.transaction;
    include jta;
}

module jdk.logging {
    provides java.logging;
    include logging;
    include tracing;
}

// ## localedata is loaded by the extension class loader
// ## for now, in the same connected graph loaded by the bootstrap class loader
module sun.localedata {
    requires local jdk.base;
    include localedata;
}

module sun.charsets {
    requires local jdk.base;   // loaded by bootstrap class loader
    include charsets;
}

module sun.resources {
    requires local jdk.base;   // loaded by bootstrap class loader
    include resources;
}

// Oracle's platform extension (supported APIs)
module jdk.sctp {
    include sctp;
}

module jdk.zipfs {
    include zipfs;
    exports com.sun.nio.zipfs;
}

module jdk.httpserver {
    include httpserver;
}

module jdk.devtools {
    include tools.javac;
    include tools.javah;
    include tools.javap;
    include tools.javadoc;

    // ## temporary: exports this package so that jdk.tools.base
    // ##     requires public jdk.devtools;
    // ## to workaround its dependency by the jar tool that causes the
    // ## ClassAnalyzer to generate "requires public jdk.devtools.internal;"
    exports com.sun.tools.classfile;

    view jdk.javac {
        class com.sun.tools.javac.Main;
    }
    view jdk.javah {
        class com.sun.tools.javah.Main;
    }
    view jdk.javap {
        class com.sun.tools.javap.Main;
    }
    view jdk.javadoc {
        class com.sun.tools.javadoc.Main;
    }
}

// developer tools to be included in the jdk-base-image
module jdk.tools.base {
    requires public jdk.devtools;

    include tools.jar;
    include tools.jarsigner;
    include tools.jpkg;
    include tools.jrepo;
    include tools.jsign;
    include tools.keytool;
    include tools.pack200;

    view jdk.jar {
        class sun.tools.jar.Main;
    }

    view jdk.jarsigner {
       class sun.security.tools.JarSigner;
    }

    view jdk.jpkg {
        class org.openjdk.jigsaw.cli.Packager;
    }

    view jdk.jrepo {
        class org.openjdk.jigsaw.cli.Repositor;
    }

    view jdk.jsign {
        class org.openjdk.jigsaw.cli.Signer;
    }

    view jdk.keytool {
       class sun.security.tools.KeyTool;
    }

    view jdk.pack200 {
        class com.sun.java.util.jar.pack.Driver;
    }
}

// JRE tools to be included in the jdk-module-image and jre-module-image
module jdk.tools.jre {
    // tools support
    include hprof;
    include servicetag;

    // JRE tools
    include tools.policytool;
    view jdk.policytool {
         class sun.security.tools.policytool.PolicyTool;
    }
}

// Other developer tools to be included in the jdk-module-image
module jdk.tools {
    requires public jdk.tools.jre;     // Tools in JRE
    requires public jdk.tools.base;    // developer tools for the base module
    requires public jdk.tools.jaxws;   // developer tools for the jaxws module

    include attach;
    include jdi;
    include jdwp;
    include jvmstat;
    include sajdi;

    include tools.appletviewer;
    include tools.extcheck;
    include tools.jcmd;
    include tools.jconsole;
    include tools.jdb;
    include tools.jdb.gui;
    include tools.jhat;
    include tools.jinfo;
    include tools.jmap;
    include tools.jps;
    include tools.jrunscript;
    include tools.jsadebugd;
    include tools.jstack;
    include tools.jstat;
    include tools.jstatd;
    include tools.native2ascii;
    include tools.rmic;
    include tools.serialver;

    view jdk.attach {
        exports com.sun.tools.attach;
        exports com.sun.tools.attach.spi;

        // ## workaround javac NPE
        class org.openjdk.jigsaw.Hi;
    }

    view jdk.jcmd {
        class sun.tools.jcmd.JCmd;
    }

    view jdk.jconsole {
        exports com.sun.tools.jconsole;
        class sun.tools.jconsole.JConsole;
    }

    view jdk.serialver {
        class sun.tools.serialver.SerialVer;
    }
   
    view jdk.jdb {
        class com.sun.tools.example.debug.tty.TTY;
    }

    view jdk.jps {
        class sun.tools.jps.Jps;
    }

    view jdk.jstatd {
        class sun.tools.jstatd.Jstatd;
    }

    view jdk.jstat {
        class sun.tools.jstat.Jstat;
    }

    view jdk.jhat {
        class com.sun.tools.hat.Main;
    }

    view jdk.jinfo {
        class sun.tools.jinfo.JInfo;
    }
    view jdk.jmap {
        class sun.tools.jmap.JMap;
    }

    view jdk.jrunscript {
        class com.sun.tools.script.shell.Main;
    }

    view jdk.jstack {
         class sun.tools.jstack.JStack;
    }

    view jdk.extcheck {
        class com.sun.tools.extcheck.Main;
    }

    view jdk.native2ascii {
        class sun.tools.native2ascii.Main;
    }

    view jdk.jsadebugd {
         class sun.jvm.hotspot.jdi.SADebugServer;
    }

    view jdk.appletviewer {
        class sun.applet.Main;
    }

    view jdk.rmic {
        class sun.rmi.rmic.Main;
    }
}

module jdk.jre {
    requires public jdk.tools.jre;
    requires public jdk.base;
    requires public jdk.auth;
    requires public jdk.compat;
    requires public jdk.compiler;
    requires public jdk.corba;
    requires public jdk.cosnaming;
    requires public jdk.crypto;
    requires public jdk.deploy;
    requires public jdk.desktop;
    requires public jdk.httpserver;
    requires public jdk.instrument;
    requires public jdk.jaxp;
    requires public jdk.jaxws;
    requires public jdk.jdbc;
    requires public jdk.jdbc.rowset;
    requires public jdk.jndi;
    requires public jdk.jta;
    requires public jdk.jx.annotations;
    requires public jdk.kerberos;
    requires public jdk.logging;
    requires public jdk.management;
    requires public jdk.management.iiop;
    requires public jdk.prefs;
    requires public jdk.rmi;
    requires public jdk.scripting;
    requires public jdk.sctp;
    requires public jdk.security.acl;
    requires public jdk.smartcardio;
    requires public jdk.snmp;
    requires public jdk.sunec;
    requires public jdk.sunpkcs11;
    requires public jdk.sunmscapi;
    requires public jdk.tls;
    requires public jdk.ucrypto;
    requires public jdk.xmldsig;
    requires jdk.zipfs;

    // charsets, resource bundles and data for other locales 
    requires sun.charsets;
    requires sun.resources;
    requires sun.localedata;
}

module jdk {
    requires public jdk.jre;
    requires public jdk.tools;
}

// ## ClassPath mode support
// ## Ultimately we want this configuration be generated 
// ## automatically e.g. jmod install jdk.base and get
// ## reconfigured when new modules get installed
module jdk.classpath {
    requires jdk.base;
    requires optional jdk.auth;
    requires optional jdk.compat;
    requires optional jdk.compiler;
    requires optional jdk.corba;
    requires optional jdk.cosnaming;
    requires optional jdk.crypto;
    requires optional jdk.deploy;
    requires optional jdk.desktop;
    requires optional jdk.httpserver;
    requires optional jdk.instrument;
    requires optional jdk.jaxp;
    requires optional jdk.jaxws;
    requires optional jdk.jdbc;
    requires optional jdk.jdbc.rowset;
    requires optional jdk.jndi;
    requires optional jdk.jta;
    requires optional jdk.jx.annotations;
    requires optional jdk.kerberos;
    requires optional jdk.logging;
    requires optional jdk.management;
    requires optional jdk.management.iiop;
    requires optional jdk.prefs;
    requires optional jdk.rmi;
    requires optional jdk.scripting;
    requires optional jdk.security.acl;
    requires optional jdk.smartcardio;
    requires optional jdk.snmp;
    requires optional jdk.tls;
    requires optional jdk.xmldsig;

    // the following are modules that should be loaded by the extension loader
    // ## workaround: when the security providers are converted as services,
    // ## they will be part of the configuration for jdk.classpath
    requires optional jdk.sunec;
    requires optional jdk.sunpkcs11;
    requires optional jdk.sunmscapi;
    requires optional jdk.ucrypto;
    requires optional jdk.sctp;
    requires optional jdk.zipfs;

    // tools module
    requires optional jdk.tools.base;
    requires optional jdk.tools.jre;
    requires optional jdk.tools.jaxws;
    requires optional jdk.tools;

    // ## Workaround: generate a configuration on disk
    class org.openjdk.jigsaw.Hi;
}
