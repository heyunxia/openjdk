#
# Copyright (c) 2011, 2014, Oracle and/or its affiliates. All rights reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.  Oracle designates this
# particular file as subject to the "Classpath" exception as provided
# by Oracle in the LICENSE file that accompanied this code.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
# or visit www.oracle.com if you need additional information or have any
# questions.
#

LIBJAAS_MAPFILE :=
ifneq ($(OPENJDK_TARGET_OS), solaris)
  LIBJAAS_EXCLUDE_FILES := Solaris.c
else
  # only on solaris...wonder why
  LIBJAAS_MAPFILE := $(JDK_TOPDIR)/make/mapfiles/libjaas/mapfile-vers
endif

LIBJAAS_NAME := jaas_unix
ifeq ($(OPENJDK_TARGET_OS), windows)
  LIBJAAS_NAME := jaas_nt
endif

$(eval $(call SetupNativeCompilation,BUILD_LIBJAAS, \
    LIBRARY := $(LIBJAAS_NAME), \
    OUTPUT_DIR := $(INSTALL_LIBRARIES_HERE), \
    SRC := $(JDK_TOPDIR)/src/jdk.security.auth/$(OPENJDK_TARGET_OS_API_DIR)/native/libjaas, \
    LANG := C, \
    OPTIMIZATION := LOW, \
    CFLAGS := $(CFLAGS_JDKLIB) -I$(JDK_OUTPUTDIR)/gensrc_headers/jdk.security.auth, \
    MAPFILE := $(LIBJAAS_MAPFILE), \
    LDFLAGS := $(filter-out -ljava, $(LDFLAGS_JDKLIB)) \
        $(call SET_SHARED_LIBRARY_ORIGIN), \
    LDFLAGS_windows := netapi32.lib user32.lib mpr.lib advapi32.lib, \
    LDFLAGS_SUFFIX_windows := $(LDFLAGS_JDKLIB_SUFFIX), \
    LDFLAGS_SUFFIX_solaris := -lc, \
    EXCLUDE_FILES := $(LIBJAAS_EXCLUDE_FILES), \
    VERSIONINFO_RESOURCE := $(GLOBAL_VERSION_INFO_RESOURCE), \
    RC_FLAGS := $(RC_FLAGS) \
        -D "JDK_FNAME=$(LIBJAAS_NAME).dll" \
        -D "JDK_INTERNAL_NAME=$(LIBJAAS_NAME)" \
        -D "JDK_FTYPE=0x2L", \
    OBJECT_DIR := $(JDK_OUTPUTDIR)/objs/libjaas, \
    DEBUG_SYMBOLS := $(DEBUG_ALL_BINARIES)))

$(BUILD_LIBJAAS): $(BUILD_LIBJAVA)

SECURITY_JAAS_LIBRARIES += $(BUILD_LIBJAAS)

##########################################################################################

LIBJ2PCSC_SRC := $(JDK_TOPDIR)/src/java.smartcardio/share/native/libj2pcsc \
    $(JDK_TOPDIR)/src/java.smartcardio/$(OPENJDK_TARGET_OS_API_DIR)/native/libj2pcsc
LIBJ2PCSC_CPPFLAGS := $(addprefix -I,$(LIBJ2PCSC_SRC)) \
    -I$(JDK_TOPDIR)/src/java.smartcardio/$(OPENJDK_TARGET_OS_API_DIR)/native/libj2pcsc/MUSCLE \
    -I$(JDK_OUTPUTDIR)/gensrc_headers/java.smartcardio

$(eval $(call SetupNativeCompilation,BUILD_LIBJ2PCSC, \
    LIBRARY := j2pcsc, \
    OUTPUT_DIR := $(INSTALL_LIBRARIES_HERE), \
    SRC := $(LIBJ2PCSC_SRC), \
    LANG := C, \
    CFLAGS_posix := -D__sun_jdk, \
    OPTIMIZATION := LOW, \
    CFLAGS := $(CFLAGS_JDKLIB) $(LIBJ2PCSC_CPPFLAGS), \
    MAPFILE := $(JDK_TOPDIR)/make/mapfiles/libj2pcsc/mapfile-vers, \
    LDFLAGS := $(LDFLAGS_JDKLIB) \
        $(call SET_SHARED_LIBRARY_ORIGIN), \
    LDFLAGS_SUFFIX_posix := $(LIBDL), \
    LDFLAGS_SUFFIX_windows := winscard.lib, \
    LDFLAGS_SUFFIX_solaris := -lc, \
    VERSIONINFO_RESOURCE := $(GLOBAL_VERSION_INFO_RESOURCE), \
    RC_FLAGS := $(RC_FLAGS) \
        -D "JDK_FNAME=j2pcsc.dll" \
        -D "JDK_INTERNAL_NAME=j2pcsc" \
        -D "JDK_FTYPE=0x2L", \
    OBJECT_DIR := $(JDK_OUTPUTDIR)/objs/libj2pcsc, \
    DEBUG_SYMBOLS := $(DEBUG_ALL_BINARIES)))

SECURITY_SMARTCARDIO_LIBRARIES += $(BUILD_LIBJ2PCSC)

##########################################################################################

ifneq ($(OPENJDK_TARGET_OS), windows)
  LIBJ2GSS_SRC := $(JDK_TOPDIR)/src/java.security.jgss/share/native/libj2gss \
      $(JDK_TOPDIR)/src/java.security.jgss/$(OPENJDK_TARGET_OS_API_DIR)/native/libj2gss \
      #

  $(eval $(call SetupNativeCompilation,BUILD_LIBJ2GSS, \
      LIBRARY := j2gss, \
      OUTPUT_DIR := $(INSTALL_LIBRARIES_HERE), \
      SRC := $(LIBJ2GSS_SRC), \
      LANG := C, \
      OPTIMIZATION := LOW, \
      CFLAGS := $(CFLAGS_JDKLIB) $(addprefix -I, $(LIBJ2GSS_SRC) $(BUILD_LIBJAVA_SRC)) \
          -I$(JDK_OUTPUTDIR)/gensrc_headers/java.security.jgss, \
      MAPFILE := $(JDK_TOPDIR)/make/mapfiles/libj2gss/mapfile-vers, \
      LDFLAGS := $(LDFLAGS_JDKLIB) \
          $(call SET_SHARED_LIBRARY_ORIGIN), \
      LDFLAGS_SUFFIX := $(LIBDL), \
      LDFLAGS_SUFFIX_solaris := -lc, \
      OBJECT_DIR := $(JDK_OUTPUTDIR)/objs/libj2gss, \
      DEBUG_SYMBOLS := $(DEBUG_ALL_BINARIES)))

  SECURITY_KERBEROS_LIBRARIES += $(BUILD_LIBJ2GSS)
endif

##########################################################################################

ifneq ($(BUILD_CRYPTO), no)
  BUILD_LIBKRB5_NAME :=
  ifeq ($(OPENJDK_TARGET_OS), windows)
    BUILD_LIBKRB5_NAME := w2k_lsa_auth
    BUILD_LIBKRB5_SRC := $(JDK_TOPDIR)/src/java.security.jgss/$(OPENJDK_TARGET_OS_API_DIR)/native/libw2k_lsa_auth
    BUILD_LIBKRB5_LIBS := advapi32.lib Secur32.lib netapi32.lib kernel32.lib user32.lib \
        gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib \
        ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib wsock32.lib
  else ifeq ($(OPENJDK_TARGET_OS), macosx)
    BUILD_LIBKRB5_NAME := osxkrb5
    BUILD_LIBKRB5_SRC := $(JDK_TOPDIR)/src/java.security.jgss/macosx/native/libosxkrb5
    BUILD_LIBKRB5_LIBS := \
        -framework JavaNativeFoundation \
        -framework Cocoa \
        -framework SystemConfiguration \
        -framework Kerberos
  endif

  ifneq ($(BUILD_LIBKRB5_NAME), )
    $(eval $(call SetupNativeCompilation,BUILD_LIBKRB5, \
        LIBRARY := $(BUILD_LIBKRB5_NAME), \
        OUTPUT_DIR := $(INSTALL_LIBRARIES_HERE), \
        SRC := $(BUILD_LIBKRB5_SRC), \
        LANG := C, \
        OPTIMIZATION := LOW, \
        CFLAGS := $(CFLAGS_JDKLIB) \
            $(addprefix -I, $(BUILD_LIBKRB5_SRC)) \
            -I$(JDK_OUTPUTDIR)/gensrc_headers/java.security.jgss, \
        LDFLAGS := $(LDFLAGS_JDKLIB) \
            $(call SET_SHARED_LIBRARY_ORIGIN), \
        LDFLAGS_SUFFIX := $(BUILD_LIBKRB5_LIBS), \
        VERSIONINFO_RESOURCE := $(GLOBAL_VERSION_INFO_RESOURCE), \
        RC_FLAGS := $(RC_FLAGS) \
            -D "JDK_FNAME=$(BUILD_LIBKRB5_NAME).dll" \
            -D "JDK_INTERNAL_NAME=$(BUILD_LIBKRB5_NAME)" \
            -D "JDK_FTYPE=0x2L", \
        OBJECT_DIR := $(JDK_OUTPUTDIR)/objs/libkrb5, \
        DEBUG_SYMBOLS := $(DEBUG_ALL_BINARIES)))

    SECURITY_KERBEROS_LIBRARIES += $(BUILD_LIBKRB5)
  endif
endif

##########################################################################################

ifeq ($(OPENJDK_TARGET_OS), windows)

  LIBSUNMSCAPI_SRC := $(JDK_TOPDIR)/src/jdk.crypto.mscapi/$(OPENJDK_TARGET_OS_API_DIR)/native/libsunmscapi

  $(eval $(call SetupNativeCompilation,BUILD_LIBSUNMSCAPI, \
      LIBRARY := sunmscapi, \
      OUTPUT_DIR := $(INSTALL_LIBRARIES_HERE), \
      SRC := $(LIBSUNMSCAPI_SRC), \
      LANG := C++, \
      OPTIMIZATION := LOW, \
      CFLAGS := $(CFLAGS_JDKLIB) \
          -I$(LIBSUNMSCAPI_SRC), \
      LDFLAGS := $(LDFLAGS_JDKLIB) $(LDFLAGS_CXX_JDK) \
          $(call SET_SHARED_LIBRARY_ORIGIN), \
      LDFLAGS_SUFFIX := Crypt32.Lib advapi32.lib, \
      VERSIONINFO_RESOURCE := $(GLOBAL_VERSION_INFO_RESOURCE), \
      RC_FLAGS := $(RC_FLAGS) \
          -D "JDK_FNAME=sunmscapi.dll" \
          -D "JDK_INTERNAL_NAME=sunmscapi" \
          -D "JDK_FTYPE=0x2L", \
      OBJECT_DIR := $(JDK_OUTPUTDIR)/objs/libsunmscapi, \
      DEBUG_SYMBOLS := $(DEBUG_ALL_BINARIES)))

  SECURITY_MSCAPI_LIBRARIES += $(BUILD_LIBSUNMSCAPI)
endif

##########################################################################################

LIBJ2PKCS11_SRC := $(JDK_TOPDIR)/src/jdk.crypto.pkcs11/share/native/libj2pkcs11 \
    $(JDK_TOPDIR)/src/jdk.crypto.pkcs11/$(OPENJDK_TARGET_OS_API_DIR)/native/libj2pkcs11

$(eval $(call SetupNativeCompilation,BUILD_LIBJ2PKCS11, \
    LIBRARY := j2pkcs11, \
    OUTPUT_DIR := $(INSTALL_LIBRARIES_HERE), \
    SRC := $(LIBJ2PKCS11_SRC), \
    LANG := C, \
    OPTIMIZATION := LOW, \
    CFLAGS := $(CFLAGS_JDKLIB) $(addprefix -I, $(LIBJ2PKCS11_SRC) $(BUILD_LIBJAVA_SRC)) \
        -I$(JDK_OUTPUTDIR)/gensrc_headers/jdk.crypto.pkcs11, \
    MAPFILE := $(JDK_TOPDIR)/make/mapfiles/libj2pkcs11/mapfile-vers, \
    LDFLAGS := $(LDFLAGS_JDKLIB) \
        $(call SET_SHARED_LIBRARY_ORIGIN), \
    LDFLAGS_SUFFIX_posix := $(LIBDL), \
    LDFLAGS_SUFFIX_solaris := -lc, \
    VERSIONINFO_RESOURCE := $(GLOBAL_VERSION_INFO_RESOURCE), \
    RC_FLAGS := $(RC_FLAGS) \
        -D "JDK_FNAME=j2pkcs11.dll" \
        -D "JDK_INTERNAL_NAME=j2pkcs11" \
        -D "JDK_FTYPE=0x2L", \
    OBJECT_DIR := $(JDK_OUTPUTDIR)/objs/libj2pkcs11, \
    DEBUG_SYMBOLS := $(DEBUG_ALL_BINARIES)))

SECURITY_PKCS11_LIBRARIES += $(BUILD_LIBJ2PKCS11)

##########################################################################################

ifeq ($(ENABLE_INTREE_EC), yes)

  LIBSUNEC_SRC := $(JDK_TOPDIR)/src/jdk.crypto.ec/share/native/libsunec
  BUILD_LIBSUNEC_FLAGS := $(addprefix -I, $(SUNEC_SRC))

  #
  # On sol-sparc...all libraries are compiled with -xregs=no%appl
  # (set in CFLAGS_REQUIRED_sparc)
  #
  # except!!! libsunec.so
  #
  ECC_JNI_SOLSPARC_FILTER :=
  ifeq ($(OPENJDK_TARGET_CPU_ARCH), sparc)
    ECC_JNI_SOLSPARC_FILTER := -xregs=no%appl
  endif

  $(eval $(call SetupNativeCompilation,BUILD_LIBSUNEC, \
      LIBRARY := sunec, \
      OUTPUT_DIR := $(INSTALL_LIBRARIES_HERE), \
      SRC := $(LIBSUNEC_SRC), \
      LANG := C++, \
      OPTIMIZATION := LOW, \
      CFLAGS := $(filter-out $(ECC_JNI_SOLSPARC_FILTER), $(CFLAGS_JDKLIB)) \
          $(BUILD_LIBSUNEC_FLAGS) \
          -DMP_API_COMPATIBLE -DNSS_ECC_MORE_THAN_SUITE_B, \
      CXXFLAGS := $(filter-out $(ECC_JNI_SOLSPARC_FILTER), $(CXXFLAGS_JDKLIB)) \
          $(BUILD_LIBSUNEC_FLAGS), \
      MAPFILE := $(JDK_TOPDIR)/make/mapfiles/libsunec/mapfile-vers, \
      LDFLAGS := $(LDFLAGS_JDKLIB) $(LDFLAGS_CXX_JDK), \
      LDFLAGS_macosx := $(call SET_SHARED_LIBRARY_ORIGIN), \
      LDFLAGS_SUFFIX := $(LIBCXX), \
      LDFLAGS_SUFFIX_linux := -lc, \
      LDFLAGS_SUFFIX_solaris := -lc, \
      VERSIONINFO_RESOURCE := $(GLOBAL_VERSION_INFO_RESOURCE), \
      RC_FLAGS := $(RC_FLAGS) \
          -D "JDK_FNAME=sunec.dll" \
          -D "JDK_INTERNAL_NAME=sunec" \
          -D "JDK_FTYPE=0x2L", \
      OBJECT_DIR := $(JDK_OUTPUTDIR)/objs/libsunec, \
      DEBUG_SYMBOLS := $(DEBUG_ALL_BINARIES)))

  SECURITY_SUNEC_LIBRARIES += $(BUILD_LIBSUNEC)
endif

##########################################################################################

ifeq ($(OPENJDK_TARGET_OS), solaris)
  ifndef OPENJDK

    LIBJ2UCRYPTO_SRC := $(JDK_TOPDIR)/src/closed/jdk.crypto.ucrypto/solaris/native/libj2ucrypto

    $(eval $(call SetupNativeCompilation,BUILD_LIBJ2UCRYPTO, \
        LIBRARY := j2ucrypto, \
        OUTPUT_DIR := $(INSTALL_LIBRARIES_HERE), \
        SRC := $(LIBJ2UCRYPTO_SRC), \
        LANG := C, \
        OPTIMIZATION := LOW, \
        CFLAGS := $(CFLAGS_JDKLIB) \
            $(addprefix -I, $(LIBJ2UCRYPTO_SRC)), \
        MAPFILE := $(JDK_TOPDIR)/make/mapfiles/libj2ucrypto/mapfile-vers, \
        LDFLAGS := $(LDFLAGS_JDKLIB), \
        LDFLAGS_SUFFIX := $(LIBDL), \
        LDFLAGS_SUFFIX_solaris := -lc, \
        OBJECT_DIR := $(JDK_OUTPUTDIR)/objs/libj2ucrypto, \
        DEBUG_SYMBOLS := $(DEBUG_ALL_BINARIES)))

    $(BUILD_LIBJ2UCRYPTO): $(BUILD_LIBJAVA)

    SECURITY_UCRYPTO_LIBRARIES += $(BUILD_LIBJ2UCRYPTO)

  endif
endif
