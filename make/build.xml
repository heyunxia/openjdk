<?xml version="1.0" encoding="UTF-8"?>
<!--
 Copyright 2007-2009 Sun Microsystems, Inc.  All Rights Reserved.
 DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.

 This code is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License version 2 only, as
 published by the Free Software Foundation.  Sun designates this
 particular file as subject to the "Classpath" exception as provided
 by Sun in the LICENSE file that accompanied this code.

 This code is distributed in the hope that it will be useful, but WITHOUT
 ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 version 2 for more details (a copy is included in the LICENSE file that
 accompanied this code).

 You should have received a copy of the GNU General Public License version
 2 along with this work; if not, write to the Free Software Foundation,
 Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.

 Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
 CA 95054 USA or visit www.sun.com if you need additional information or
 have any questions.
-->

<!--
 This is the main build file for the complete langtools workspace.
 It is used both when working on the tools in NetBeans, and when building
 JDK itself, in which case it is invoked from the wrapper Makefile.
 -->

<project name="langtools" default="build" basedir="..">

    <!-- Force full debuginfo for javac if the debug.classfiles
    property is set.  This must be BEFORE the include of
    build.properties because it sets javac.debuglevel.  -->
    <condition property="javac.debuglevel" value="source,lines,vars">
        <equals arg1="${debug.classfiles}" arg2="true"/>
    </condition>

    <!-- The following locations can be used to override default property values. -->

    <!-- Use this location for customizations specific to this instance of this workspace -->
    <property file="build.properties"/>

    <!-- Use this location for customizations common to all OpenJDK langtools workspaces -->
    <property file="${user.home}/.openjdk/${ant.project.name}-build.properties"/>

    <!-- Use this location for customizations common to all OpenJDK workspaces -->
    <property file="${user.home}/.openjdk/build.properties"/>

    <!-- Convenient shorthands for standard locations within the workspace. -->
    <property name="build.dir" location="build"/>
    <property name="build.bootstrap.dir" location="${build.dir}/bootstrap"/>
    <property name="build.bootstrap.lib.dir" location="${build.dir}/bootstrap/lib"/>
    <property name="build.coverage.dir" location="${build.dir}/coverage"/>
    <property name="build.classes.dir" location="${build.dir}/classes"/>
    <property name="build.gensrc.dir" location="${build.dir}/gensrc"/>
    <property name="build.genstubs.dir" location="${build.dir}/genstubs"/>
    <property name="build.javadoc.dir" location="${build.dir}/javadoc"/>
    <property name="build.jtreg.dir" location="${build.dir}/jtreg"/>
    <property name="build.modules.dir" location="${build.dir}/modules"/>
    <property name="build.toolclasses.dir" location="${build.dir}/toolclasses"/>
    <property name="dist.dir" location="dist"/>
    <property name="dist.bin.dir" location="${dist.dir}/bin"/>
    <property name="dist.coverage.dir" location="${dist.dir}/coverage"/>
    <property name="dist.findbugs.dir" location="${dist.dir}/findbugs"/>
    <property name="dist.lib.dir" location="${dist.dir}/lib"/>
    <property name="make.dir" location="make"/>
    <property name="make.tools.dir" location="${make.dir}/tools"/>
    <property name="src.dir" location="src"/>
    <property name="src.bin.dir" location="${src.dir}/share/bin"/>
    <property name="src.classes.dir" location="${src.dir}/share/classes"/>
    <property name="test.dir" location="test"/>

    <!-- java.marker is set to a marker file to check for within a Java install dir.
         The best file to check for across Solaris/Linux/Windows/MacOS is one of the
         executables; regrettably, that is OS-specific. -->
    <condition property="java.marker" value="bin/java">
        <os family="unix"/>
    </condition>
    <condition property="java.marker" value="bin/java.exe">
        <os family="windows"/>
    </condition>

    <!-- Standard property values, if not overriden by earlier settings. -->
    <property file="${make.dir}/build.properties"/>

    <!-- launcher.java is used in the launcher scripts provided to run
        the tools' jar files.  If it has not already been set, then
        default it to use ${target.java.home}, if available, otherwise
        quietly default to simply use "java". -->
    <condition property="launcher.java"
        value="${target.java.home}/bin/java" else="java">
        <isset property="target.java.home"/>
    </condition>

    <condition property="boot.java.provides.modules">
        <available file="${boot.java.home}/lib/modules/%jigsaw-library" type="file"/>
    </condition>

    <condition property="default.bootstrap.opts"
        value="-J-L -J${build.bootstrap.dir}/lib/modules -J-Xmode:module"
        else="-J-Xbootclasspath/p:${build.bootstrap.dir}/classes">
           <isset property="boot.java.provides.modules"/>
    </condition>

    <condition property="target.java.provides.modules">
        <available file="${target.java.home}/lib/modules/%jigsaw-library" type="file"/>
    </condition>

    <!-- Logic for handling access import jdk classes, if available.
        import.jdk should be unset, or set to jdk home (to use rt.jar)
        or to jdk repo (to use src/share/classes).
        Based on the value, if any, set up default values for javac's sourcepath,
        classpath and bootclasspath. Note: the default values are overridden
        in the build-bootstrap-classes macro. -->

    <available property="import.jdk.src.dir" value="${import.jdk}/src/share/classes"
        filepath="${import.jdk}/src/share/classes" file="java/nio/file/Path.java"/>
    <available property="import.jdk.jar" value="${import.jdk}/jre/lib/rt.jar"
        ignoresystemclasses="true"
        classpath="${import.jdk}/jre/lib/rt.jar" classname="java.nio.file.Path"/>

    <!-- Set the default value of the sourcepath used for javac. -->
    <condition property="javac.sourcepath" value="${build.genstubs.dir}" else="">
        <isset property="import.jdk.src.dir"/>
    </condition>

    <!-- Set the default value of the classpath used for javac. -->
    <property name="javac.classpath" value=""/>

    <!-- Set the default bootclasspath option used for javac. 
	Note that different variants of the option are used, meaning we can't just 
	define the value for the option.
	Note the explicit use of the standard property ${path.separator} in the following.
	This is because Ant is not clever enough to handle direct use of : or ; -->
    <condition property="javac.bootclasspath.opt"
            value="-Xbootclasspath:${build.classes.dir}${path.separator}${import.jdk.jar}"
            else="-Xbootclasspath/p:${build.classes.dir}">
        <isset property="import.jdk.jar"/>
    </condition>

    <condition property="exclude.files" value="" else="${require.import.jdk.files}">
        <isset property="import.jdk"/>
    </condition>

    <!-- for debugging -->
    <target name="check-import.jdk">
        <echo message="import.jdk: ${import.jdk}"/>
        <echo message="import.jdk.jar: ${import.jdk.jar}"/>
        <echo message="import.jdk.src.dir: ${import.jdk.src.dir}"/>
    </target>

    <!-- Standard target to build deliverables for JDK build. -->

    <target name="build" depends="build-bootstrap-tools,build-all-classes">
        <copy todir="${dist.dir}/bootstrap">
            <fileset dir="${build.bootstrap.dir}" includes="bin/,lib/"/>
        </copy>
        <chmod dir="${dist.dir}/bootstrap/bin" perm="ugo+rx">
            <include name="*"/>
        </chmod>
        <mkdir dir="${dist.lib.dir}"/>
        <jar file="${dist.lib.dir}/classes.jar" basedir="${build.classes.dir}"/>
        <zip file="${dist.lib.dir}/src.zip" basedir="${src.classes.dir}"/>
    </target>

    <target name="build-bootstrap-tools"
        depends="build-bootstrap-javac,build-bootstrap-javadoc,build-bootstrap-doclets,build-bootstrap-javah"
    />

    <target name="build-all-tools"
        depends="build-javac,build-javadoc,build-doclets,build-javah,build-javap,build-apt"
    />

    <target name="build-all-classes" depends="build-bootstrap-javac,-create-import-jdk-stubs">
        <build-classes includes="${javac.includes} ${javadoc.includes} ${doclets.includes} ${javah.includes} ${javap.includes} ${apt.includes}"/>
    </target>

    <target name="build-module-library" depends="-check-module-library-uptodate,-def-jmod"
            if="target.java.provides.modules" unless="module.library.uptodate">
        <delete dir="${dist.lib.dir}/modules"/>
        <jmod task="create" library="${dist.lib.dir}/modules">
            <arg value="-P"/>
            <arg file="${target.java.home}/lib/modules"/>
        </jmod>
        <jmod task="install" library="${dist.lib.dir}/modules">
            <arg file="${dist.lib.dir}/${javac.module.name}@${module.version}.jmod"/>
            <arg file="${dist.lib.dir}/${javadoc.module.name}@${module.version}.jmod"/>
            <arg file="${dist.lib.dir}/${javah.module.name}@${module.version}.jmod"/>
            <arg file="${dist.lib.dir}/${javap.module.name}@${module.version}.jmod"/>
            <arg file="${dist.lib.dir}/${apt.module.name}@${module.version}.jmod"/>
            <arg file="${dist.lib.dir}/${langtools.module.name}@${module.version}.jmod"/>
        </jmod>
    </target>

    <target name="-check-module-library-uptodate"
            depends="build-module-javac,build-module-javadoc,build-module-javah,build-module-javap,build-module-apt,build-module-langtools">
        <mkdir dir="${dist.lib.dir}"/>  <!-- uugh, Ant quirk: dependset requires this to exist -->
        <dependset>
            <srcfileset dir="${dist.lib.dir}" includes="*.jmod"/>
            <targetfileset dir="${dist.lib.dir}/modules"/>
        </dependset>
        <available property="module.library.uptodate" file="${dist.lib.dir}/modules/%jigsaw-library"/>
    </target>

    <target name="build-bootstrap-module-library" depends="-check-bootstrap-module-library-uptodate,-def-jmod"
            if="boot.java.provides.modules" unless="bootstrap.module.library.uptodate">
        <delete dir="${build.bootstrap.lib.dir}/modules"/>
        <jmod task="create" library="${build.bootstrap.lib.dir}/modules" java.home="${boot.java.home}">
            <arg value="-P"/>
            <arg file="${boot.java.home}/lib/modules"/>
        </jmod>
        <jmod task="install" library="${build.bootstrap.lib.dir}/modules" java.home="${boot.java.home}">
            <arg file="${build.bootstrap.lib.dir}/${javac.module.name}@${module.version}.jmod"/>
            <arg file="${build.bootstrap.lib.dir}/${javadoc.module.name}@${module.version}.jmod"/>
            <arg file="${build.bootstrap.lib.dir}/${javah.module.name}@${module.version}.jmod"/>
            <arg file="${build.bootstrap.lib.dir}/${javap.module.name}@${module.version}.jmod"/>
            <arg file="${build.bootstrap.lib.dir}/${langtools.module.name}@${module.version}.jmod"/>
        </jmod>
    </target>

    <target name="-check-bootstrap-module-library-uptodate"
            depends="build-bootstrap-module-javac,build-bootstrap-module-javadoc,build-bootstrap-module-javah,build-bootstrap-module-javap,build-bootstrap-module-langtools">
        <mkdir dir="${build.bootstrap.lib.dir}"/>  <!-- uugh, Ant quirk: dependset requires this to exist -->
        <dependset>
            <srcfileset dir="${build.bootstrap.lib.dir}" includes="*.jmod"/>
            <targetfileset dir="${build.bootstrap.lib.dir}/modules"/>
        </dependset>
        <available property="bootstrap.module.library.uptodate" file="${build.bootstrap.lib.dir}/modules/%jigsaw-library"/>
    </target>

    <!-- clean -->

    <target name="clean" description="Delete all generated files">
        <delete dir="${build.dir}"/>
        <delete dir="${dist.dir}"/>
    </target>

    <!-- Additional targets for running tools on the build -->

    <target name="jtreg" depends="build-all-tools,-def-jtreg">
        <jtreg-tool name="all" tests="${jtreg.tests}"/>
    </target>

    <target name="findbugs" depends="-def-findbugs,build-all-tools">
        <property name="findbugs.reportLevel" value="medium"/>
        <mkdir dir="${dist.findbugs.dir}"/>
        <findbugs
            home="${findbugs.home}"
            projectName="JDK langtools ${full.version}"
            output="xml"
            outputFile="${dist.findbugs.dir}/findbugs.xml"
            reportLevel="${findbugs.reportLevel}"
            failOnError="false"
            errorProperty="findbugs.all.errors"
            warningsProperty="findbugs.all.warnings"
            jvmargs="-Xmx512M">
            <class location="${build.classes.dir}"/>
            <sourcePath>
                <pathelement location="${src.classes.dir}"/>
            </sourcePath>
        </findbugs>
        <exec executable="sh">
            <arg value="${findbugs.home}/bin/convertXmlToText"/>
            <arg value="-longBugCodes"/>
            <arg value="-html:${findbugs.home}/src/xsl/fancy.xsl"/>
            <arg value="${dist.findbugs.dir}/findbugs.xml"/>
            <redirector output="${dist.findbugs.dir}/findbugs.html"/>
        </exec>
    </target>

    <target name="coverage" depends="-def-cobertura,build-all-classes,instrument-classes,jtreg,coverage-report"/>

    <target name="instrument-classes" depends="-def-cobertura">
        <!-- only define the following property when we want coverage info -->
        <path id="coverage.classpath">
            <pathelement location="${build.coverage.dir}/classes"/>
            <path refid="cobertura.classpath"/>
        </path>
        <property name="coverage.options" value="-Dnet.sourceforge.cobertura.datafile=${build.coverage.dir}/cobertura.ser"/>
        <property name="coverage.classpath" refid="coverage.classpath"/>
        <mkdir dir="${build.coverage.dir}/classes"/>
        <delete file="${build.coverage.dir}/cobertura.ser"/>
        <cobertura-instrument todir="${build.coverage.dir}/classes"
            datafile="${build.coverage.dir}/cobertura.ser">
            <fileset dir="${build.classes.dir}"
               includes="**/*.class" excludes="**/resources/*.class"/>
        </cobertura-instrument>
    </target>

    <target name="coverage-report" depends="-def-cobertura">
        <mkdir dir="${dist.coverage.dir}"/>
        <cobertura-report
            srcdir="${src.classes.dir}"
            destdir="${dist.coverage.dir}"
            datafile="${build.coverage.dir}/cobertura.ser"/>
        <cobertura-report
            format="xml"
            srcdir="${src.classes.dir}"
            destdir="${dist.coverage.dir}"
            datafile="${build.coverage.dir}/cobertura.ser"/>
    </target>

    <!-- javac targets -->

    <target name="build-bootstrap-javac"
            depends="-def-build-bootstrap-classes,-def-build-bootstrap-jar,-def-build-bootstrap-tool">
        <build-bootstrap-classes includes="${javac.includes}"/>
        <build-bootstrap-jar     name="javac" includes="${javac.includes}"/>
        <build-bootstrap-tool    name="javac"/>
    </target>

    <target name="build-classes-javac" depends="build-bootstrap-module-library,-create-import-jdk-stubs">
        <build-classes includes="${javac.includes}"/>
    </target>

    <target name="build-javac" depends="build-classes-javac,build-module-javac">
        <build-jar  name="javac" includes="${javac.includes}"/>
        <build-tool name="javac"/>
    </target>

    <target name="build-module-javac" depends="build-module-langtools,-check-module-javac-uptodate"
            if="target.java.provides.modules" unless="javac.module.uptodate">
        <build-module module.name="${javac.module.name}"
            module.includes.classes="${javac.module.includes.classes}"
            module.excludes.classes="${javac.module.excludes.classes}"
            module.includes.resources="${javac.module.includes.resources}"
            module.excludes.resources="${javac.module.excludes.resources}"
            />
    </target>

    <target name="-check-module-javac-uptodate" depends="build-classes-javac">
        <uptodate property="javac.module.uptodate" targetfile="${dist.lib.dir}/${javac.module.name}@${module.version}.jmod">
            <srcfiles dir="${build.classes.dir}"
                includes="${javac.module.includes.classes}"
                excludes="${javac.module.excludes.classes}"
                />
            <srcfiles dir="${build.classes.dir}"
                includes="${javac.module.includes.resources}"
                excludes="${javac.module.excludes.resources}"
                />
        </uptodate>
    </target>

    <target name="build-bootstrap-module-javac" depends="build-bootstrap-module-langtools,-check-bootstrap-module-javac-uptodate"
            if="boot.java.provides.modules" unless="bootstrap.javac.module.uptodate">
        <build-bootstrap-module module.name="${javac.module.name}"
            module.includes.classes="${javac.module.includes.classes}"
            module.excludes.classes="${javac.module.excludes.classes}"
            module.includes.resources="${javac.module.includes.resources}"
            module.excludes.resources="${javac.module.excludes.resources}"
            />
    </target>

    <target name="-check-bootstrap-module-javac-uptodate" depends="build-bootstrap-javac">
        <uptodate property="bootstrap.javac.module.uptodate" targetfile="${build.bootstrap.lib.dir}/${javac.module.name}@${module.version}.jmod">
            <srcfiles dir="${build.bootstrap.dir}/classes"
                includes="${javac.module.includes.classes}"
                excludes="${javac.module.excludes.classes}"
                />
            <srcfiles dir="${build.bootstrap.dir}/classes"
                includes="${javac.module.includes.resources}"
                excludes="${javac.module.excludes.resources}"
                />
        </uptodate>
    </target>

    <target name="build-module-langtools" depends="-check-module-langtools-uptodate,-def-build-module"
            if="target.java.provides.modules" unless="langtools.module.uptodate">
        <build-module module.name="${langtools.module.name}"
            module.includes.classes="${langtools.module.includes.classes}"
            module.excludes.classes="${langtools.module.excludes.classes}"
            module.includes.resources="${langtools.module.includes.resources}"
            module.excludes.resources="${langtools.module.excludes.resources}"
            />
    </target>

    <target name="-check-module-langtools-uptodate" depends="build-classes-javac,build-classes-apt">
        <uptodate property="langtools.module.uptodate" targetfile="${dist.lib.dir}/${langtools.module.name}@${module.version}.jmod">
            <srcfiles dir="${build.classes.dir}"
                includes="${langtools.module.includes.classes}"
                excludes="${langtools.module.excludes.classes}"
                />
            <srcfiles dir="${build.classes.dir}"
                includes="${langtools.module.includes.resources}"
                excludes="${langtools.module.excludes.resources}"
                />
        </uptodate>
    </target>

    <target name="build-bootstrap-module-langtools" depends="-check-bootstrap-module-langtools-uptodate,-def-build-bootstrap-module"
            if="boot.java.provides.modules" unless="bootstrap.langtools.module.uptodate">
        <build-bootstrap-module module.name="${langtools.module.name}"
            module.includes.classes="${langtools.module.includes.classes}"
            module.excludes.classes="${langtools.module.excludes.classes}"
            module.includes.resources="${langtools.module.includes.resources}"
            module.excludes.resources="${langtools.module.excludes.resources}"
            />
    </target>

    <target name="-check-bootstrap-module-langtools-uptodate" depends="build-bootstrap-javac,build-bootstrap-apt">
        <uptodate property="bootstrap.langtools.module.uptodate" targetfile="${build.bootstrap.lib.dir}/${langtools.module.name}@${module.version}.jmod">
            <srcfiles dir="${build.bootstrap.dir}/classes"
                includes="${langtools.module.includes.classes}"
                excludes="${langtools.module.excludes.classes}"
                />
            <srcfiles dir="${build.bootstrap.dir}/classes"
                includes="${langtools.module.includes.resources}"
                excludes="${langtools.module.excludes.resources}"
                />
        </uptodate>
    </target>

    <target name="javadoc-javac" depends="build-javac,-def-javadoc-tool">
        <javadoc-tool name="javac" includes="${javac.includes}" options="${javadoc.jls3.option}"/>
    </target>

    <target name="jtreg-javac" depends="build-javac,build-javap,-def-jtreg">
        <jtreg-tool name="javac" tests="${javac.tests}"/>
    </target>

    <target name="findbugs-javac" depends="build-javac,-def-findbugs">
        <findbugs-tool name="javac"/>
    </target>

    <target name="javac" depends="build-javac,jtreg-javac,findbugs-javac"/>

    <!-- javadoc targets -->

    <target name="build-bootstrap-javadoc" depends="build-bootstrap-javac">
        <build-bootstrap-classes includes="${javadoc.includes}"/>
        <build-bootstrap-jar     name="javadoc" includes="${javadoc.includes}"
                                 jarclasspath="javac.jar doclets.jar"/>
        <build-bootstrap-tool    name="javadoc"/>
    </target>

    <target name="build-classes-javadoc" depends="build-classes-javac">
        <build-classes includes="${javadoc.includes}"/>
    </target>

    <target name="build-javadoc" depends="build-javac,build-classes-javadoc,build-module-javadoc">
        <build-jar  name="javadoc" includes="${javadoc.includes}"
                    jarclasspath="javac.jar doclets.jar"/>
        <build-tool name="javadoc"/>
    </target>

    <target name="build-module-javadoc" depends="build-module-javac,-check-module-javadoc-uptodate"
            if="target.java.provides.modules" unless="javadoc.module.uptodate">
        <build-module module.name="${javadoc.module.name}"
            module.includes.classes="${javadoc.module.includes.classes}"
            module.excludes.classes="${javadoc.module.excludes.classes}"
            module.includes.resources="${javadoc.module.includes.resources}"
            module.excludes.resources="${javadoc.module.excludes.resources}"
            />
    </target>

    <target name="-check-module-javadoc-uptodate" depends="build-classes-javadoc,build-classes-doclets">
        <uptodate property="javadoc.module.uptodate" targetfile="${dist.lib.dir}/${javadoc.module.name}@${module.version}.jmod">
            <srcfiles dir="${build.classes.dir}"
                includes="${javadoc.module.includes.classes}"
                excludes="${javadoc.module.excludes.classes}"
                />
            <srcfiles dir="${build.classes.dir}"
                includes="${javadoc.module.includes.resources}"
                excludes="${javadoc.module.excludes.resources}"
                />
        </uptodate>
    </target>

    <target name="build-bootstrap-module-javadoc" depends="build-bootstrap-module-javac,-check-bootstrap-module-javadoc-uptodate"
            if="boot.java.provides.modules" unless="bootstrap.javadoc.module.uptodate">
        <build-bootstrap-module module.name="${javadoc.module.name}"
            module.includes.classes="${javadoc.module.includes.classes}"
            module.excludes.classes="${javadoc.module.excludes.classes}"
            module.includes.resources="${javadoc.module.includes.resources}"
            module.excludes.resources="${javadoc.module.excludes.resources}"
            />
    </target>

    <target name="-check-bootstrap-module-javadoc-uptodate" depends="build-bootstrap-javadoc,build-bootstrap-doclets">
        <uptodate property="bootstrap.javadoc.module.uptodate" targetfile="${build.bootstrap.lib.dir}/${javadoc.module.name}@${module.version}.jmod">
            <srcfiles dir="${build.bootstrap.dir}/classes"
                includes="${javadoc.module.includes.classes}"
                excludes="${javadoc.module.excludes.classes}"
                />
            <srcfiles dir="${build.bootstrap.dir}/classes"
                includes="${javadoc.module.includes.resources}"
                excludes="${javadoc.module.excludes.resources}"
                />
        </uptodate>
    </target>

    <target name="javadoc-javadoc" depends="build-javadoc,-def-javadoc-tool">
        <javadoc-tool name="javadoc" includes="${javadoc.includes}"/>
    </target>

    <target name="jtreg-javadoc" depends="build-javadoc,-def-jtreg">
        <jtreg-tool name="javadoc" tests="${javadoc.tests}"/>
    </target>

    <target name="findbugs-javadoc" depends="build-javadoc,-def-findbugs">
        <findbugs-tool name="javadoc"/>
    </target>

    <target name="javadoc" depends="build-javadoc,jtreg-javadoc,findbugs-javadoc"/>

    <!-- doclets targets -->

    <target name="build-bootstrap-doclets" depends="build-bootstrap-javadoc,-def-build-bootstrap-jar">
        <build-bootstrap-classes includes="${doclets.includes}"/>
        <build-bootstrap-jar     name="doclets" includes="${doclets.includes}"
                                 jarmainclass="com.sun.tools.javadoc.Main"
                                 jarclasspath="javadoc.jar"/>
    </target>

    <target name="build-classes-doclets" depends="build-classes-javadoc">
        <build-classes includes="${doclets.includes}"/>
    </target>

    <target name="build-doclets" depends="build-javadoc,build-classes-doclets">
        <!-- just jar, no bin for doclets -->
        <build-jar name="doclets" includes="${doclets.includes}" jarclasspath="javadoc.jar"/>
    </target>

    <!-- (no javadoc for doclets) -->

    <target name="jtreg-doclets" depends="build-doclets,-def-jtreg">
        <jtreg-tool name="doclets" tests="${doclets.tests}"/>
    </target>

    <target name="findbugs-doclets" depends="build-doclets,-def-findbugs">
        <findbugs-tool name="doclets"/>
    </target>

    <target name="doclets" depends="build-doclets,jtreg-doclets,findbugs-doclets"/>

    <!-- javah targets -->

    <target name="build-bootstrap-javah" depends="build-bootstrap-javadoc">
        <build-bootstrap-classes includes="${javah.includes}"/>
        <build-bootstrap-jar     name="javah" includes="${javah.includes}"
                                 jarclasspath="javadoc.jar doclets.jar javac.jar"/>
        <build-bootstrap-tool    name="javah"/>
    </target>

    <target name="build-javah" depends="build-javac,build-classes-javah,build-module-javah">
        <build-jar  name="javah" includes="${javah.includes}" jarclasspath="javac.jar"/>
        <build-tool name="javah"/>
    </target>

    <target name="build-classes-javah" depends="build-classes-javadoc">
        <build-classes includes="${javah.includes}"/>
    </target>

    <target name="build-module-javah" depends="build-module-javac,-check-module-javah-uptodate"
            if="target.java.provides.modules" unless="javah.module.uptodate">
        <build-module module.name="${javah.module.name}"
            module.includes.classes="${javah.module.includes.classes}"
            module.excludes.classes="${javah.module.excludes.classes}"
            module.includes.resources="${javah.module.includes.resources}"
            module.excludes.resources="${javah.module.excludes.resources}"
            />
    </target>

    <target name="-check-module-javah-uptodate" depends="build-classes-javah">
        <uptodate property="javah.module.uptodate" targetfile="${dist.lib.dir}/${javah.module.name}@${module.version}.jmod">
            <srcfiles dir="${build.classes.dir}"
                includes="${javah.module.includes.classes}"
                excludes="${javah.module.excludes.classes}"
                />
            <srcfiles dir="${build.classes.dir}"
                includes="${javah.module.includes.resources}"
                excludes="${javah.module.excludes.resources}"
                />
        </uptodate>
    </target>

    <target name="build-bootstrap-module-javah" depends="build-bootstrap-module-javac,-check-bootstrap-module-javah-uptodate"
            if="boot.java.provides.modules" unless="bootstrap.javah.module.uptodate">
        <build-bootstrap-module module.name="${javah.module.name}"
            module.includes.classes="${javah.module.includes.classes}"
            module.excludes.classes="${javah.module.excludes.classes}"
            module.includes.resources="${javah.module.includes.resources}"
            module.excludes.resources="${javah.module.excludes.resources}"
            />
    </target>

    <target name="-check-bootstrap-module-javah-uptodate" depends="build-bootstrap-javah">
        <uptodate property="bootstrap.javah.module.uptodate" targetfile="${build.bootstrap.lib.dir}/${javah.module.name}@${module.version}.jmod">
            <srcfiles dir="${build.bootstrap.dir}/classes"
                includes="${javah.module.includes.classes}"
                excludes="${javah.module.excludes.classes}"
                />
            <srcfiles dir="${build.bootstrap.dir}/classes"
                includes="${javah.module.includes.resources}"
                excludes="${javah.module.excludes.resources}"
                />
        </uptodate>
    </target>

    <!-- (no javadoc for javah) -->

    <target name="jtreg-javah" depends="build-javah,-def-jtreg">
        <jtreg-tool name="javah" tests="${javah.tests}"/>
    </target>

    <target name="findbugs-javah" depends="build-javah,-def-findbugs">
        <findbugs-tool name="javah"/>
    </target>

    <target name="javah" depends="build-javah,jtreg-javah,findbugs-javah"/>

    <!-- javap targets -->

    <target name="build-bootstrap-javap"
            depends="-def-build-bootstrap-classes,-def-build-bootstrap-jar,-def-build-bootstrap-tool">
        <build-bootstrap-classes includes="${javap.includes}"/>
        <build-bootstrap-jar     name="javap" includes="${javap.includes}"
                                 jarmainclass="sun.tools.javap.Main"/>
        <build-bootstrap-tool    name="javap"/>
    </target>

    <target name="build-classes-javap" depends="build-classes-javac">
        <build-classes includes="${javap.includes}"/>
    </target>

    <target name="build-javap" depends="build-javac,build-classes-javap,build-module-javap">
        <build-jar  name="javap" includes="${javap.includes}"
                    jarmainclass="com.sun.tools.javap.Main"
                    jarclasspath="javac.jar"/>
        <build-tool name="javap"/>
    </target>

    <target name="build-module-javap" depends="build-module-javac,-check-module-javap-uptodate"
            if="target.java.provides.modules" unless="javap.module.uptodate">
        <build-module module.name="${javap.module.name}"
            module.includes.classes="${javap.module.includes.classes}"
            module.excludes.classes="${javap.module.excludes.classes}"
            module.includes.resources="${javap.module.includes.resources}"
            module.excludes.resources="${javap.module.excludes.resources}"
            />
    </target>

    <target name="-check-module-javap-uptodate" depends="build-classes-javap">
        <uptodate property="javap.module.uptodate" targetfile="${dist.lib.dir}/${javap.module.name}@${module.version}.jmod">
            <srcfiles dir="${build.classes.dir}"
                includes="${javap.module.includes.classes}"
                excludes="${javap.module.excludes.classes}"
                />
            <srcfiles dir="${build.classes.dir}"
                includes="${javap.module.includes.resources}"
                excludes="${javap.module.excludes.resources}"
                />
        </uptodate>
    </target>

    <target name="build-bootstrap-module-javap" depends="build-bootstrap-module-javac,-check-bootstrap-module-javap-uptodate"
            if="boot.java.provides.modules" unless="bootstrap.javap.module.uptodate">
        <build-bootstrap-module module.name="${javap.module.name}"
            module.includes.classes="${javap.module.includes.classes}"
            module.excludes.classes="${javap.module.excludes.classes}"
            module.includes.resources="${javap.module.includes.resources}"
            module.excludes.resources="${javap.module.excludes.resources}"
            />
    </target>

    <target name="-check-bootstrap-module-javap-uptodate" depends="build-bootstrap-javap">
        <uptodate property="bootstrap.javap.module.uptodate" targetfile="${build.bootstrap.lib.dir}/${javap.module.name}@${module.version}.jmod">
            <srcfiles dir="${build.bootstrap.dir}/classes"
                includes="${javap.module.includes.classes}"
                excludes="${javap.module.excludes.classes}"
                />
            <srcfiles dir="${build.bootstrap.dir}/classes"
                includes="${javap.module.includes.resources}"
                excludes="${javap.module.excludes.resources}"
                />
        </uptodate>
    </target>

    <!-- (no javadoc for javap) -->

    <target name="jtreg-javap" depends="build-javap,-def-jtreg">
        <jtreg-tool name="javap" tests="${javap.tests}"/>
    </target>

    <target name="findbugs-javap" depends="build-javap,-def-findbugs">
        <findbugs-tool name="javap"/>
    </target>

    <target name="javap" depends="build-javap,jtreg-javap,findbugs-javap"/>

    <!-- apt targets -->

    <target name="build-bootstrap-apt" depends="build-bootstrap-javac">
        <build-bootstrap-classes includes="${apt.includes}"/>
        <build-bootstrap-jar     name="apt" includes="${apt.includes}"
                                 jarclasspath="javac.jar"/>
        <build-bootstrap-tool    name="apt"/>
    </target>

    <target name="build-apt" depends="build-javac,build-classes-apt,build-module-apt">
        <build-jar  name="apt" includes="${apt.includes}" jarclasspath="javac.jar"/>
        <build-tool name="apt"/>
    </target>

    <target name="build-module-apt" depends="build-module-javac,-check-module-apt-uptodate"
            if="target.java.provides.modules" unless="apt.module.uptodate">
        <build-module module.name="${apt.module.name}"
            module.includes.classes="${apt.module.includes.classes}"
            module.excludes.classes="${apt.module.excludes.classes}"
            module.includes.resources="${apt.module.includes.resources}"
            module.excludes.resources="${apt.module.excludes.resources}"
            />
    </target>

    <target name="-check-module-apt-uptodate" depends="build-classes-apt">
        <uptodate property="apt.module.uptodate" targetfile="${dist.lib.dir}/${apt.module.name}@${module.version}.jmod">
            <srcfiles dir="${build.classes.dir}"
                includes="${apt.module.includes.classes}"
                excludes="${apt.module.excludes.classes}"
                />
            <srcfiles dir="${build.classes.dir}"
                includes="${apt.module.includes.resources}"
                excludes="${apt.module.excludes.resources}"
                />
        </uptodate>
    </target>

    <target name="build-classes-apt" depends="build-classes-javac">
        <build-classes includes="${apt.includes}"/>
    </target>

    <target name="javadoc-apt" depends="build-apt,-def-javadoc-tool">
        <javadoc-tool name="apt" includes="${apt.includes}"/>
    </target>


    <target name="jtreg-apt" depends="build-apt,-def-jtreg">
        <jtreg-tool name="apt" tests="${apt.tests}"/>
    </target>

    <target name="findbugs-apt" depends="build-apt,-def-findbugs">
        <findbugs-tool name="apt"/>
    </target>

    <target name="apt" depends="build-apt,jtreg-apt,findbugs-apt"/>

    <!-- Create import JDK stubs -->

    <target name="-create-import-jdk-stubs" depends="-def-genstubs" if="import.jdk.src.dir">
        <mkdir dir="${build.genstubs.dir}"/>
        <genstubs
            srcdir="${import.jdk.src.dir}" destdir="${build.genstubs.dir}"
            includes="${import.jdk.stub.files}"
            fork="true" classpath="${build.toolclasses.dir}:${build.bootstrap.dir}/classes:${ant.home}/lib/ant.jar"
        />
    </target>

    <!-- Check targets -->

    <target name="-check-boot.java.home" depends="-def-check">
        <check name="bootstrap java" property="boot.java.home" marker="${java.marker}"/>
    </target>

    <target name="-check-target.java.home" depends="-def-check">
        <check name="target java" property="target.java.home" marker="${java.marker}"/>
    </target>

    <target name="-check-cobertura.home" depends="-def-check">
        <check name="cobertura" property="cobertura.home" marker="cobertura.jar"/>
    </target>

    <target name="-check-findbugs.home" depends="-def-check">
        <check name="findbugs" property="findbugs.home" marker="lib/findbugs.jar"/>
    </target>

    <target name="-check-jtreg.home" depends="-def-check">
        <check name="jtreg" property="jtreg.home" marker="lib/jtreg.jar"/>
    </target>

    <!-- Ant macro and preset defs -->

    <target name="-def-build-module">
        <macrodef name="build-module">
            <attribute name="module.name"/>
            <attribute name="module.version" default="${module.version}"/>
            <attribute name="module.includes.classes"/>
            <attribute name="module.excludes.classes"/>
            <attribute name="module.includes.resources"/>
            <attribute name="module.excludes.resources"/>
            <attribute name="classes.dir" default="${build.classes.dir}"/>
            <attribute name="modules.dir" default="${build.modules.dir}"/>
            <attribute name="dest.dir"    default="${dist.lib.dir}"/>
            <attribute name="java.home"   default="${target.java.home}"/>
            <sequential>
                <mkdir dir="@{modules.dir}/@{module.name}/classes"/>
                <!--
                <exec executable="@{java.home}/bin/jmod" failonerror="true">
                    <arg value="dump-class"/>
                    <arg value="@{module.name}"/>
                    <arg value="module-info"/>
                    <arg file="@{modules.dir}/@{module.name}/classes/module-info.java"/>
                </exec>
                -->
                <copy file="@{java.home}/lib/modules/@{module.name}/@{module.version}/info"
                    tofile="@{modules.dir}/@{module.name}/classes/module-info.class"/>
                <copy todir="@{modules.dir}/@{module.name}/classes"
                        includeEmptyDirs="false">
                    <fileset dir="@{classes.dir}"
                        includes="@{module.includes.classes}"
                        excludes="@{module.excludes.classes}"
                        />
                </copy>
                <mkdir dir="@{modules.dir}/@{module.name}/resources"/>
                <copy todir="@{modules.dir}/@{module.name}/resources"
                        includeEmptyDirs="false">
                    <fileset dir="@{classes.dir}"
                        includes="@{module.includes.resources}"
                        excludes="@{module.excludes.resources}"
                        />
                </copy>
                <touch file="@{modules.dir}/@{module.name}/resources/dummy"/>
                <mkdir dir="@{dest.dir}"/>
                <exec executable="@{java.home}/bin/jpkg" failonerror="true">
                    <arg value="-v"/>
                    <arg value="-m"/>
                    <arg file="@{modules.dir}/@{module.name}/classes"/>
                    <arg value="-r"/>
                    <arg file="@{modules.dir}/@{module.name}/resources"/>
                    <arg value="-d"/>
                    <arg file="@{dest.dir}"/>
                    <arg value="jmod"/>
                    <arg value="@{module.name}"/>
                </exec>
            </sequential>
        </macrodef>
    </target>

    <target name="-def-jmod">
        <macrodef name="jmod">
            <attribute name="task"/>
            <attribute name="library"/>
            <attribute name="java.home" default="${target.java.home}"/>
            <element name="args" implicit="true" optional="true"/>
            <sequential>
                <echo message="jmod @{task} -L @{library} ..."/>
                <exec executable="@{java.home}/bin/jmod" failonerror="true">
                    <arg value="@{task}"/>
                    <arg value="--verbose"/>
                    <arg value="-L"/>
                    <arg file="@{library}"/>
                    <args/>
                </exec>
            </sequential>
        </macrodef>
    </target>

    <target name="-def-build-tool">
        <macrodef name="build-tool">
            <attribute name="name"/>
            <attribute name="bin.dir" default="${dist.bin.dir}"/>
            <attribute name="java" default="${launcher.java}"/>
            <sequential>
                <mkdir dir="@{bin.dir}"/>
                <copy file="${src.bin.dir}/launcher.sh-template" tofile="@{bin.dir}/@{name}">
                    <filterset begintoken="#" endtoken="#">
                        <filter token="PROGRAM" value="@{name}"/>
                        <filter token="TARGET_JAVA" value="@{java}"/>
                    </filterset>
                </copy>
                <chmod file="@{bin.dir}/@{name}" perm="ugo+rx"/>
            </sequential>
        </macrodef>
    </target>

    <target name="-def-build-jar">
        <macrodef name="build-jar">
            <attribute name="name"/>
            <attribute name="includes"/>
            <attribute name="classes.dir" default="${build.classes.dir}"/>
            <attribute name="lib.dir" default="${dist.lib.dir}"/>
            <attribute name="jarmainclass" default="com.sun.tools.@{name}.Main"/>
            <attribute name="jarclasspath" default=""/>
            <sequential>
                <mkdir dir="@{lib.dir}"/>
                <jar destfile="@{lib.dir}/@{name}.jar"
                     basedir="@{classes.dir}"
                     includes="@{includes}">
                    <manifest>
                        <attribute name="Main-Class" value="@{jarmainclass}"/>
                        <attribute name="Class-Path" value="@{jarclasspath}"/>
                    </manifest>
                </jar>
            </sequential>
        </macrodef>
    </target>

    <target name="-def-build-classes" depends="-def-pcompile">
        <macrodef name="build-classes">
            <attribute name="includes"/>
            <attribute name="excludes" default="${exclude.files} **/package-info.java"/>
            <attribute name="classes.dir" default="${build.classes.dir}"/>
            <attribute name="gensrc.dir" default="${build.gensrc.dir}"/>
            <attribute name="bootstrap.opts" default="${default.bootstrap.opts}"/>
            <attribute name="bootclasspath.opt" default="${javac.bootclasspath.opt}"/>
            <attribute name="classpath" default="${javac.classpath}"/>
            <attribute name="sourcepath" default="${javac.sourcepath}"/>
            <attribute name="java.home" default="${boot.java.home}"/>
            <attribute name="source" default="${javac.source}"/>
            <attribute name="target" default="${javac.target}"/>
            <attribute name="release" default="${release}"/>
            <attribute name="full.version" default="${full.version}"/>
            <sequential>
                <echo message="build-classes: bootstrap.opts=@{bootstrap.opts}"/>
                <echo level="verbose" message="build-classes: excludes=@{excludes}"/>
                <echo level="verbose" message="build-classes: bootclasspath.opt=@{bootclasspath.opt}"/>
                <echo level="verbose" message="build-classes: classpath=@{classpath}"/>
                <echo level="verbose" message="build-classes: sourcepath=@{sourcepath}"/>
                <mkdir dir="@{gensrc.dir}"/>
                <mkdir dir="@{classes.dir}"/>
                <pcompile srcdir="${src.classes.dir}"
                          destdir="@{gensrc.dir}"
                          includes="@{includes}"/>
                <copy todir="@{gensrc.dir}">
                    <fileset dir="${src.classes.dir}" includes="@{includes}"/>
                    <globmapper from="*.properties-template" to="*.properties"/>
                    <filterset begintoken="$(" endtoken=")">
                        <filter token="JDK_VERSION" value="${jdk.version}"/>
                        <filter token="RELEASE" value="@{release}"/>
                        <filter token="FULL_VERSION" value="@{full.version}"/>
                    </filterset>
                </copy>
                <pcompile srcdir="@{gensrc.dir}"
                          destdir="@{gensrc.dir}"
                          includes="**/*.properties"/>
                <javac fork="true"
                       executable="@{java.home}/bin/javac"
                       srcdir="${src.classes.dir}:@{gensrc.dir}"
                       destdir="@{classes.dir}"
                       includes="@{includes}"
                       excludes="@{excludes}"
                       sourcepath="@{sourcepath}"
                       classpath="@{classpath}"
                       includeAntRuntime="no"
                       source="@{source}"
                       target="@{target}"
                       debug="${javac.debug}"
                       debuglevel="${javac.debuglevel}">
                    <compilerarg value="-implicit:none"/>
                    <compilerarg value="-Xprefer:source"/>
                    <compilerarg line="@{bootstrap.opts}"/>
                    <compilerarg line="@{bootclasspath.opt}"/>
                    <compilerarg line="${javac.no.jdk.warnings}"/>
                    <compilerarg line="${javac.version.opt}"/>
                    <compilerarg line="${javac.lint.opts}"/>
                </javac>
                <copy todir="@{classes.dir}" includeemptydirs="false">
                    <fileset dir="${src.classes.dir}" includes="@{includes}" excludes="@{excludes}">
                        <exclude name="**/*.java"/>
                        <exclude name="**/*.properties"/>
                        <exclude name="**/*-template"/>
                        <exclude name="**/package.html"/>
                        <exclude name="**/overview.html"/>
                        <exclude name="**/*.orig"/>
                        <exclude name="**/*.rej"/>
                        <exclude name="**/*.BAK"/>
                        <exclude name="**/*~"/>
                    </fileset>
                </copy>
            </sequential>
        </macrodef>
    </target>

    <target name="-def-build-bootstrap-tool" depends="-check-boot.java.home,-def-build-tool">
        <presetdef name="build-bootstrap-tool">
            <build-tool
                bin.dir="${build.bootstrap.dir}/bin"
                java="${boot.java}"/>
        </presetdef>
    </target>

    <target name="-def-build-bootstrap-jar" depends="-def-build-jar">
        <presetdef name="build-bootstrap-jar">
            <build-jar
                classes.dir="${build.bootstrap.dir}/classes"
                lib.dir="${build.bootstrap.dir}/lib"/>
        </presetdef>
    </target>

    <target name="-def-build-bootstrap-classes" depends="-def-build-classes">
        <presetdef name="build-bootstrap-classes">
            <build-classes
                source="${boot.javac.source}"
                target="${boot.javac.target}"
                gensrc.dir="${build.bootstrap.dir}/gensrc"
                classes.dir="${build.bootstrap.dir}/classes"
                bootstrap.opts=""
                bootclasspath.opt="-Xbootclasspath/p:${build.bootstrap.dir}/classes"
                sourcepath=""
                release="${bootstrap.release}"
                full.version="${bootstrap.full.version}"
                excludes="${require.import.jdk.files} **/package-info.java"/>
        </presetdef>
    </target>

    <target name="-def-build-bootstrap-module" depends="-def-build-module">
        <presetdef name="build-bootstrap-module">
            <build-module
                classes.dir="${build.bootstrap.dir}/classes"
                modules.dir="${build.bootstrap.dir}/modules"
                dest.dir="${build.bootstrap.dir}/lib"
                java.home="${boot.java.home}"/>
        </presetdef>
    </target>

    <target name="-def-pcompile">
        <mkdir dir="${build.toolclasses.dir}"/>
        <javac fork="true"
               source="${boot.javac.source}"
               target="${boot.javac.target}"
               executable="${boot.java.home}/bin/javac"
               srcdir="${make.tools.dir}/CompileProperties"
               destdir="${build.toolclasses.dir}/"
               classpath="${ant.home}/lib/ant.jar"/>
        <taskdef name="pcompile"
                 classname="CompilePropertiesTask"
                 classpath="${build.toolclasses.dir}/"/>
    </target>

    <target name="-def-genstubs" depends="build-bootstrap-javac">
        <mkdir dir="${build.toolclasses.dir}"/>
        <javac fork="true"
               source="${boot.javac.source}"
               target="${boot.javac.target}"
               executable="${boot.java.home}/bin/javac"
               srcdir="${make.tools.dir}/GenStubs"
               destdir="${build.toolclasses.dir}/"
               classpath="${build.bootstrap.dir}/classes:${ant.home}/lib/ant.jar"/>
        <taskdef name="genstubs"
                 classname="GenStubs$$Ant"
                 classpath="${build.toolclasses.dir}/"/>
    </target>

    <target name="-def-javadoc-tool" depends="-check-target.java.home">
        <macrodef name="javadoc-tool">
            <attribute name="name"/>
            <attribute name="includes"/>
            <attribute name="options" default=""/>
            <attribute name="source" default="1.5"/> <!-- FIXME -->
            <sequential>
                <property name="javadoc.options" value=""/> <!-- default, can be overridden per user or per project -->
                <!-- Note: even with this default value, includes
         from src.classes.dir get javadoc'd; see packageset below -->
                <property name="javadoc.packagenames" value="none"/> <!-- default, can be overridden per user or per project -->
                <javadoc
                    executable="${target.java.home}/bin/javadoc"
                    destdir="${build.javadoc.dir}/@{name}"
                    source="@{source}"
                    windowtitle="UNOFFICIAL"
                    failonerror="true"
                    use="true"
                    author="false"
                    version="false"
                    packagenames="${javadoc.packagenames}" >
                    <header><![CDATA[<strong>Unofficial Javadoc</strong> generated from developer sources for preview purposes only]]></header>
                    <arg line="@{options}"/>
                    <bootclasspath>
                        <path location="${build.classes.dir}"/>
                        <path location="${target.java.home}/jre/lib/rt.jar"/>
                    </bootclasspath>
                    <sourcepath>
                        <pathelement location="${src.classes.dir}"/>
                    </sourcepath>
                    <!-- XXX just <fileset> (restricted further to **/*.java) and no <packageset> -->
                    <!-- means that {@link some.package} will not work, which is no good. -->
                    <!-- (It correctly skips excluded single classes, but not if packageset is also included, -->
                    <!-- which also causes duplicates in the class index for included files.) -->
                    <packageset dir="${src.classes.dir}" includes="@{includes}">
                        <or>
                            <filename name="java/"/>
                            <filename name="javax/"/>
                            <filename name="com/sun/javadoc/"/>
                            <filename name="com/sun/mirror/"/>
                            <filename name="com/sun/source/"/>
                        </or>
                    </packageset>
                </javadoc>
            </sequential>
        </macrodef>
    </target>

    <target name="-def-jtreg" unless="jtreg.defined" depends="-check-jtreg.home,-check-target.java.home">
        <taskdef name="jtreg" classname="com.sun.javatest.regtest.Main$$Ant">
            <classpath>
                <pathelement location="${jtreg.home}/lib/jtreg.jar"/>
                <pathelement location="${jtreg.home}/lib/javatest.jar"/>
            </classpath>
        </taskdef>
        <macrodef name="jtreg-tool">
            <attribute name="name"/>
            <attribute name="tests"/>
            <attribute name="jdk" default="${target.java.home}"/>
            <attribute name="samevm" default="true"/>
            <attribute name="verbose" default="summary"/>
            <attribute name="options" default=""/>
            <attribute name="keywords" default="-keywords:!ignore"/>
            <attribute name="jpda.jvmargs" default=""/>
            <sequential>
                <property name="coverage.options" value=""/>    <!-- default -->
                <property name="coverage.classpath" value=""/>    <!-- default -->
                <jtreg
                    dir="${test.dir}"
                    workDir="${build.jtreg.dir}/@{name}/work"
                    reportDir="${build.jtreg.dir}/@{name}/report"
                    jdk="@{jdk}"
                    samevm="@{samevm}" verbose="@{verbose}"
                    failonerror="false" resultproperty="jtreg.@{name}.result"
                    javacoptions="-g"
                    vmoptions="${coverage.options} -Xbootclasspath/p:${coverage.classpath}:${build.classes.dir} @{jpda.jvmargs}">
                    <arg line="@{keywords}"/>
                    <arg line="@{options}"/>
                    <arg line="@{tests}"/>
                </jtreg>
                <!-- the next two properties are for convenience, when only
                     a single instance of jtreg will be invoked. -->
                <condition property="jtreg.passed">
                    <equals arg1="${jtreg.@{name}.result}" arg2="0"/>
                </condition>
                <property name="jtreg.report" value="${build.jtreg.dir}/@{name}/report"/>
            </sequential>
        </macrodef>
        <property name="jtreg.defined" value="true"/>
    </target>

    <target name="-def-cobertura" depends="-check-cobertura.home">
        <path id="cobertura.classpath">
            <fileset dir="${cobertura.home}">
                <include name="cobertura.jar"/>
                <include name="lib/**/*.jar"/>
            </fileset>
        </path>
        <taskdef classpathref="cobertura.classpath" resource="tasks.properties"/>
    </target>

    <target name="-def-findbugs" unless="findbugs.defined" depends="-check-findbugs.home">
        <taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask">
            <classpath>
                <pathelement location="${findbugs.home}/lib/findbugs.jar"/>
            </classpath>
        </taskdef>
        <macrodef name="findbugs-tool">
            <attribute name="name"/>
            <attribute name="output" default="emacs"/>
            <attribute name="outputFile" default=""/>
            <attribute name="reportLevel" default="high"/>
            <sequential>
                <findbugs
                    home="${findbugs.home}"
                    output="@{output}"
                    outputFile="@{outputFile}"
                    reportLevel="@{reportLevel}"
                    failOnError="false"
                    errorProperty="findbugs.@{name}.errors"
                    warningsProperty="findbugs.@{name}.warnings"
                    jvmargs="-Xmx512M" >
                    <class location="${dist.dir}/lib/@{name}.jar"/>
                    <auxClasspath>
                        <pathelement location="${build.classes.dir}"/>
                    </auxClasspath>
                    <sourcePath>
                        <pathelement location="${src.classes.dir}"/>
                    </sourcePath>
                </findbugs>
            </sequential>
        </macrodef>
        <property name="findbugs.defined" value="true"/>
    </target>

    <target name="-def-check">
        <macrodef name="check">
            <attribute name="name"/>
            <attribute name="property"/>
            <attribute name="marker"/>
            <sequential>
                <fail message="Cannot locate @{name}: please set @{property} to its location">
                    <condition>
                        <not>
                            <isset property="@{property}"/>
                        </not>
                    </condition>
                </fail>
                <fail message="@{name} is not installed in ${@{property}}">
                    <condition>
                        <not>
                            <available file="${@{property}}/@{marker}"/>
                        </not>
                    </condition>
                </fail>
            </sequential>
        </macrodef>
    </target>

    <!-- standard JDK target -->
    <target name="sanity"
        description="display settings of configuration values">
        <echo level="info">ant.home = ${ant.home}</echo>
        <echo level="info">boot.java.home = ${boot.java.home}</echo>
        <echo level="info">target.java.home = ${target.java.home}</echo>
        <echo level="info">jtreg.home = ${jtreg.home}</echo>
        <echo level="info">findbugs.home = ${findbugs.home}</echo>
    </target>

    <!-- useful debugging targets -->
    <target name="diagnostics">
        <diagnostics/>
    </target>

    <target name="post-sanity" depends="-def-jtreg,sanity,build"
        description="perform basic validation after a standard build">
        <jtreg
            dir="make/test"
            workDir="${build.jtreg.dir}/post-sanity/work"
            reportDir="${build.jtreg.dir}/post-sanity/report"
            jdk="${target.java.home}"
            verbose="summary"
            failonerror="false" resultproperty="jtreg.post-sanity.result">
        </jtreg>

    </target>
</project>

