#
# Copyright (c) 2012, Oracle and/or its affiliates. All rights reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.  Oracle designates this
# particular file as subject to the "Classpath" exception as provided
# by Oracle in the LICENSE file that accompanied this code.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
# or visit www.oracle.com if you need additional information or have any
# questions.
#

default: all

include $(SPEC)
include MakeBase.gmk
include ModulesCommon.gmk

#######

IMPORT_TARGET_FILES :=

IMPORT_CLASSES := CORBA JAXP JAXWS LANGTOOLS
IMPORT_SOURCES := CORBA JAXP JAXWS LANGTOOLS
# Only Corba has binaries
IMPORT_BINARIES := CORBA

#######

# Put the libraries here. Different locations for different target apis.
ifeq ($(OPENJDK_TARGET_OS_API),posix)
    INSTALL_LIBRARIES_HERE:=$(JDK_OUTPUTDIR)/lib$(OPENJDK_TARGET_CPU_LIBDIR)
    HOTSPOT_LIB_DIR:=$(HOTSPOT_DIST)/jre/lib$(OPENJDK_TARGET_CPU_LIBDIR)
else
    INSTALL_LIBRARIES_HERE:=$(JDK_OUTPUTDIR)/bin
    HOTSPOT_LIB_DIR:=$(HOTSPOT_DIST)/jre/bin
endif

#######

#
# jar xf/unzip fails when executing them all in parallel
#   introduce artificial dependency (_DEP) buuhhh 

define ImportClasses
$1_CLASSES_DEP := $$(IMPORT_TARGET_CLASSES)
IMPORT_TARGET_CLASSES += $(JDK_OUTPUTDIR)/classes/_the.$1.classes.imported

$(JDK_OUTPUTDIR)/classes/_the.$1.classes.imported : $$($1_DIST)/lib/classes.jar $$($1_CLASSES_DEP)
	$(ECHO) Importing $1 classes.jar
	$(MKDIR) -p $$(@D)
	$(RM) $$@ $$@.tmp
	($(CD) $$(@D) && $(JAR) xvf $$< > $$@.tmp)
	$(MV) $$@.tmp $$@
endef

define ImportSources
$1_SOURCES_DEP := $$(IMPORT_TARGET_SOURCES)
IMPORT_TARGET_SOURCES += $(JDK_OUTPUTDIR)/impsrc/_the.$1.src.imported

$(JDK_OUTPUTDIR)/impsrc/_the.$1.src.imported : $$($1_DIST)/lib/src.zip $$($1_SOURCES_DEP)
	$(ECHO) Importing $1 src.zip
	$(MKDIR) -p $$(@D)
	$(RM) $$@ $$@.tmp
	($(CD) $$(@D) && $(JAR) xvf $$< > $$@.tmp)
	$(MV) $$@.tmp $$@
endef

define ImportBinaries
$1_BINARIES_DEP := $$(IMPORT_TARGET_BINARIES)
IMPORT_TARGET_BINARIES += $(JDK_OUTPUTDIR)/_the.$1.binaries.imported

$(JDK_OUTPUTDIR)/_the.$1.binaries.imported : $$($1_DIST)/lib/bin.zip $$($1_BINARIES_DEP)
	$(ECHO) Importing $1 bin.zip
	$(MKDIR) -p $$(@D)
	$(RM) $$@ $$@.tmp
	($(CD) $$(@D) && $(JAR) xvf $$< > $$@.tmp)
	$(MV) $$@.tmp $$@

SUBMODULES_TARGET_FILES += $(POSTMODULES_OUTPUTDIR)/_the.$1.binaries.imported
IDLJ_MODULE_ETC_DIR := $(SUBMODULES_DIR)/$(IDLJ_MODULE)/etc
$(POSTMODULES_OUTPUTDIR)/_the.$1.binaries.imported : $$($1_DIST)/lib/bin.zip $$($1_BINARIES_DEP)
	$(ECHO) Importing $1 bin.zip
	$(MKDIR) -p $$(IDLJ_MODULE_ETC_DIR)
	$(RM) $$@ $$@.tmp
	($(CD) $$(IDLJ_MODULE_ETC_DIR) && $(JAR) xvf $$< > $$@.tmp)
	$(MV) $$(IDLJ_MODULE_ETC_DIR)/lib/* $$(IDLJ_MODULE_ETC_DIR)
	$(RM) -r $$(IDLJ_MODULE_ETC_DIR)/lib
	$(MV) $$@.tmp $$@
endef

#######

$(foreach I,$(IMPORT_CLASSES), $(eval $(call ImportClasses,$I)))
$(foreach I,$(IMPORT_SOURCES), $(eval $(call ImportSources,$I)))
$(foreach I,$(IMPORT_BINARIES), $(eval $(call ImportBinaries,$I)))

IMPORT_TARGET_FILES += $(IMPORT_TARGET_CLASSES) $(IMPORT_TARGET_SOURCES) $(IMPORT_TARGET_BINARIES)

#######

#
# Import hotspot
#

# Bases for find patterns for all files we want from hotspot
HOTSPOT_IMPORT_FILENAMES_BASE := $(addprefix $(LIBRARY_PREFIX), jvm.* jsig.* jvm_db.* jvm_dtrace.*) Xusage.txt
HOTSPOT_IMPORT_FILENAMES_SAJDI:= $(addprefix $(LIBRARY_PREFIX), saproc.* sawindbg.*) sa-jdi.jar
# Find the files to import from hotspot
HOTSPOT_IMPORT_FILES_BASE := $(shell $(FIND) $(HOTSPOT_DIST) -type f \
	-a \( -name DUMMY $(addprefix -o$(SPACE)-name$(SPACE),$(HOTSPOT_IMPORT_FILENAMES_BASE)) \) )
HOTSPOT_IMPORT_FILES_SAJDI := $(shell $(FIND) $(HOTSPOT_DIST) -type f \
	-a \( -name DUMMY $(addprefix -o$(SPACE)-name$(SPACE),$(HOTSPOT_IMPORT_FILENAMES_SAJDI)) \) )
# Calculate target legacy locations
IMPORT_TARGET_FILES += $(patsubst $(HOTSPOT_LIB_DIR)/%,$(INSTALL_LIBRARIES_HERE)/%,\
		       $(patsubst $(HOTSPOT_DIST)/lib/%,$(JDK_OUTPUTDIR)/lib/%,\
		       $(HOTSPOT_IMPORT_FILES_BASE) $(HOTSPOT_IMPORT_FILES_SAJDI)))

# Rules for copying to legacy locations
$(INSTALL_LIBRARIES_HERE)/%: $(HOTSPOT_LIB_DIR)/%
	$(install-file)

$(JDK_OUTPUTDIR)/lib/%: $(HOTSPOT_DIST)/lib/%
	$(install-file)

# Calculate target submodules locations
SUBMODULES_TARGET_FILES += \
	$(filter-out %.diz,$(filter-out %.debuginfo,\
		$(patsubst $(HOTSPOT_LIB_DIR)/%,$(SUBMODULES_DIR)/base/lib/%,\
			$(patsubst $(HOTSPOT_DIST)/lib/%,$(SUBMODULES_DIR)/base/etc/%,\
				$(HOTSPOT_IMPORT_FILES_BASE))) \
		$(patsubst $(HOTSPOT_LIB_DIR)/%,$(SUBMODULES_DIR)/sajdi/lib/%,\
			  $(filter-out %.jar,$(HOTSPOT_IMPORT_FILES_SAJDI)))))

# Rules for copying to submodules locations
$(SUBMODULES_DIR)/base/lib/%: $(HOTSPOT_LIB_DIR)/%
	$(install-file)

$(SUBMODULES_DIR)/base/etc/%: $(HOTSPOT_DIST)/lib/%
	$(install-file)

$(SUBMODULES_DIR)/sajdi/lib/%: $(HOTSPOT_LIB_DIR)/%
	$(install-file)

JSIG_DEBUGINFO := $(strip $(wildcard $(HOTSPOT_DIST)/jre/lib$(OPENJDK_TARGET_CPU_LIBDIR)/libjsig.debuginfo) \
                  $(wildcard $(HOTSPOT_DIST)/jre/lib$(OPENJDK_TARGET_CPU_LIBDIR)/libjsig.diz) )

ifneq ($(OPENJDK_TARGET_OS), windows)
    ifeq ($(JVM_VARIANT_SERVER), true)
        IMPORT_TARGET_FILES += $(INSTALL_LIBRARIES_HERE)/server/$(LIBRARY_PREFIX)jsig$(SHARED_LIBRARY_SUFFIX)
        SUBMODULES_TARGET_FILES += $(SUBMODULES_DIR)/base/lib/server/$(LIBRARY_PREFIX)jsig$(SHARED_LIBRARY_SUFFIX)
        ifneq (,$(JSIG_DEBUGINFO))
            IMPORT_TARGET_FILES += $(INSTALL_LIBRARIES_HERE)/server/$(foreach I,$(JSIG_DEBUGINFO),$(notdir $I))
        endif
    endif
    ifeq ($(JVM_VARIANT_CLIENT), true)
        IMPORT_TARGET_FILES += $(INSTALL_LIBRARIES_HERE)/client/$(LIBRARY_PREFIX)jsig$(SHARED_LIBRARY_SUFFIX)
        SUBMODULES_TARGET_FILES += $(SUBMODULES_DIR)/base/lib/client/$(LIBRARY_PREFIX)jsig$(SHARED_LIBRARY_SUFFIX)
        ifneq (,$(JSIG_DEBUGINFO))
            IMPORT_TARGET_FILES += $(INSTALL_LIBRARIES_HERE)/client/$(foreach I,$(JSIG_DEBUGINFO),$(notdir $I))
        endif
    endif
endif

define link-file-in-parent-dir
	$(MKDIR) -p $(@D)
	$(RM) $@
	$(LN) -s ../$(@F) $@
endef

$(INSTALL_LIBRARIES_HERE)/server/%$(SHARED_LIBRARY_SUFFIX) : $(INSTALL_LIBRARIES_HERE)/%$(SHARED_LIBRARY_SUFFIX)
	$(link-file-in-parent-dir)

$(SUBMODULES_DIR)/base/lib/server/%$(SHARED_LIBRARY_SUFFIX) : $(INSTALL_LIBRARIES_HERE)/%$(SHARED_LIBRARY_SUFFIX)
	$(link-file-in-parent-dir)

$(INSTALL_LIBRARIES_HERE)/server/%.debuginfo : $(INSTALL_LIBRARIES_HERE)/%.debuginfo
	$(link-file-in-parent-dir)

$(INSTALL_LIBRARIES_HERE)/server/%.diz : $(INSTALL_LIBRARIES_HERE)/%.diz
	$(MKDIR) -p $(@D)
	$(RM) $@
	$(RM) $@.tmp $(basename $@).debuginfo
	$(LN) -s ../$(basename $(@F)).debuginfo $(basename $@).debuginfo
	$(CD) $(@D) && $(ZIP) -q -y $@.tmp $(basename $(@F)).debuginfo
	$(RM) $(basename $@).debuginfo
	$(MV) $@.tmp $@

$(INSTALL_LIBRARIES_HERE)/client/%$(SHARED_LIBRARY_SUFFIX) : $(INSTALL_LIBRARIES_HERE)/%$(SHARED_LIBRARY_SUFFIX)
	$(link-file-in-parent-dir)

$(SUBMODULES_DIR)/base/lib/client/%$(SHARED_LIBRARY_SUFFIX) : $(INSTALL_LIBRARIES_HERE)/%$(SHARED_LIBRARY_SUFFIX)
	$(link-file-in-parent-dir)

$(INSTALL_LIBRARIES_HERE)/client/%.debuginfo : $(INSTALL_LIBRARIES_HERE)/%.debuginfo
	$(link-file-in-parent-dir)

$(INSTALL_LIBRARIES_HERE)/client/%.diz : $(INSTALL_LIBRARIES_HERE)/%.diz
	$(MKDIR) -p $(@D)
	$(RM) $@
	$(RM) $@.tmp $(basename $@).debuginfo
	$(LN) -s ../$(basename $(@F)).debuginfo $(basename $@).debuginfo
	$(CD) $(@D) && $(ZIP) -q -y $@.tmp $(basename $(@F)).debuginfo
	$(RM) $(basename $@).debuginfo
	$(MV) $@.tmp $@

#######

# Import DBD

ifeq ($(USE_EXTERNAL_LIBDB),false)
  $(INSTALL_LIBRARIES_HERE)/$(BDB_LIBRARY_NAME): $(BDB_DIST)/$(BDB_LIBRARY_NAME)
	$(install-file)

  $(SUBMODULES_DIR)/base/lib/$(BDB_LIBRARY_NAME): $(BDB_DIST)/$(BDB_LIBRARY_NAME)
	$(install-file)

  IMPORT_TARGET_FILES     += $(INSTALL_LIBRARIES_HERE)/$(BDB_LIBRARY_NAME)
  SUBMODULES_TARGET_FILES += $(SUBMODULES_DIR)/base/lib/$(BDB_LIBRARY_NAME)
endif

#######

all: $(IMPORT_TARGET_FILES)

# The submodules target is called in post-modules to copy imported files to the
# correct submodule
submodules: $(SUBMODULES_TARGET_FILES)

.PHONY: all submodules
